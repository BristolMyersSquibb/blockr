[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/blockr.html","id":"get-started","dir":"Articles","previous_headings":"","what":"Get started","title":"blockr","text":"{blockr} provides plug play block can used import, transform visualize data.","code":""},{"path":"/articles/blockr.html","id":"introduction","dir":"Articles","previous_headings":"Get started","what":"Introduction","title":"blockr","text":"{blockr} aims abstracting logic behind dplyr functions blocks. assume stack succession dependent blocks. designed 3 kinds blocks: data block: entry level block determine input data. transform block: materialize dplyr operations selected data. output (plot now) block: consumes transformed data produce visualizations. stack always starts data block may end either transform blocks output block. Note: moment, one output block per stack.","code":""},{"path":"/articles/blockr.html","id":"the-user-interface","dir":"Articles","previous_headings":"Get started","what":"The user interface","title":"blockr","text":"default, last stack block visible, others collapsed. preview block can set options(\"BLOCKR_DEV\" = TRUE). User Interface Overview","code":""},{"path":"/articles/blockr.html","id":"create-a-stack","dir":"Articles","previous_headings":"Get started","what":"Create a stack","title":"blockr","text":"create stack, call new_stack() feed required blocks. simple stack providing dataset selector filter operation. serve_stack() simple wrapper run corresponding shiny app. Note serve_stack(), don’t need worry specifying modules IDs, automatically handled {blockr}. next example, ’ll see create can dynamically add remove blocks.","code":"library(blockr) library(blockr.data)  stack <- new_stack(   data_block,   filter_block ) serve_stack(stack)"},{"path":"/articles/blockr.html","id":"dynamically-add-a-block","dir":"Articles","previous_headings":"Get started","what":"Dynamically add a block","title":"blockr","text":"app interface dynamically add blocks. UI side, called generate_ui(), nothing calling stack module UI generate_server() Shiny server function. leave id NULL, namespace automatically handled. get list available blocks, leverage {blockr} registry namely available_blocks() exposes currently registered blocks. can learn registry dedicated vignette. add_block_ui() UI helper show button well necessary interface contain new block choice. Within observer listen “add block” button. , pass new block new_block slot generate_server() function. accepts name block insert well position stack (append). Blocks can removed context. Keep mind stack can’t contain 2 data blocks.","code":"library(shiny) library(blockr.data) library(blockr)  stack <- new_stack(data_block) shinyApp(   ui = bslib::page_fluid(     add_block_ui(),     generate_ui(stack, id = \"mystack\")   ),   server = function(input, output, session) {     vals <- reactiveValues(new_block = NULL)     stack <- generate_server(       stack,       id = \"mystack\",       new_block = reactive(vals$new_block)     )      observeEvent(input$add, {       vals$new_block <- NULL       # Always append to stack       loc <- length(stack$blocks)       block <- available_blocks()[[input$selected_block]]       # add_block expect the current stack, the block to add and its position       # (NULL is fine for the position, in that case the block will       # go at the end)       vals$new_block <- list(         block = block,         position = loc       )     })   } )"},{"path":"/articles/blockr.html","id":"example-with-modules","dir":"Articles","previous_headings":"Get started","what":"Example with modules","title":"blockr","text":"stack can nested within modules. {blockr.demo}.","code":"library(shiny) library(blockr.data) library(blockr)  stack <- new_stack(   data_block,   filter_block,   select_block )  block_ui <- function(id) {   ns <- shiny::NS(id)   uiOutput(ns(\"block\")) }  block_server <- function(id) {   moduleServer(     id,     function(input, output, session){       ns <- session$ns        output$block <- renderUI({         generate_ui(stack, id = ns(\"b\"))       })        generate_server(stack, id = \"b\")     }   ) }  ui <- function(req) {   fluidPage(     theme = bslib::bs_theme(5L),     div(       class = \"row\",       block_ui(\"x\")     )   ) } server <- function(input, output, session) {   block_server(\"x\") }  shinyApp(ui, server)"},{"path":"/articles/data-blocks.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"1. Data blocks","text":"Data blocks starting point stack required transform plot block.","code":""},{"path":"/articles/data-blocks.html","id":"package-based-data-block","dir":"Articles","previous_headings":"Introduction","what":"Package based data block","title":"1. Data blocks","text":"{blockr} introduces data_block() takes input package containing (multiple) dataset(s). block constructed follows: default, selected dataset datasets package can actually provide dataset like changing dat parameter (following leverage {blockr.data} datasets lab data pre-selected): practice, ’ll always call data_block() new_data_block() (internal constructor). Overall, block good testing get data package. next part, see import data file.","code":"new_data_block <- function(   ...,   dat = as.environment(\"package:datasets\"),   selected = character() ) {   # code   } # Define the custom data block custom_data_block <- function(...) {   data_block(     dat = as.environment(\"package:blockr.data\"),     selected = \"lab\",     ...   ) }  stack <- new_stack(   custom_data_block,    select_block ) serve_stack(stack)"},{"path":"/articles/data-blocks.html","id":"reading-data-from-files","dir":"Articles","previous_headings":"Introduction","what":"Reading data from files","title":"1. Data blocks","text":"{blockr} exposes 2 extra data blocks combined one 5 following data parser blocks: xpt_block, reads xpt files. sas_block, reads sas7bdat files. rds_block, reads rds files. json_block, reads json files. csv_block, reads csv files.","code":""},{"path":"/articles/data-blocks.html","id":"upload-data","dir":"Articles","previous_headings":"Introduction > Reading data from files","what":"Upload data","title":"1. Data blocks","text":"want load data location computer, upload_block() need. Since upload_block() temporarily moves data custom location, recognize might always possible security reasons.","code":"library(blockr)  stack <- new_stack(   upload_block,   csv_block,   select_block ) serve_stack(stack)"},{"path":"/articles/data-blocks.html","id":"files-browser-block","dir":"Articles","previous_headings":"Introduction > Reading data from files","what":"Files browser block","title":"1. Data blocks","text":"filesbrowser_block() can read data server file system. means data available server, won’t see anything. can customize accessible locations follows, volumes parameter: following demonstration, uploaded dummy dataset webR file system can play block. said, can definitely upload data thanks corresponding shinylive feature (upload button). Note later release, plan merge filesbrowser_block() upload_block() single variable block.","code":"custom_filesbrowser_block <- function(...) {   filesbrowser_block(     volumes = c(vol1 = \"<PATH1>\", vol2 = \"<PATH2>\"),     ...   ) } library(blockr)  stack <- new_stack(   filesbrowser_block,   csv_block,   select_block ) serve_stack(stack)"},{"path":"/articles/data-blocks.html","id":"reading-data-from-another-stack","dir":"Articles","previous_headings":"Introduction","what":"Reading data from another stack","title":"1. Data blocks","text":"result_block() allows read data another stack. code, first stack contains data_block() n-th first rows pulled head_block(). second stack, can reuse smaller dataset. dynamically add third stack, can also select third stack output input second stack (appears result block select input).","code":"library(blockr)  serve_workspace(   stack1 = new_stack(data_block, head_block),   stack2 = new_stack(result_block),   title = \"My workspace\" )"},{"path":"/articles/developer-guide.html","id":"blockr-structure","dir":"Articles","previous_headings":"","what":"{blockr} structure","title":"Developer guide","text":"hood, {blockr} utilises S3 creates classes apply relevant methods whenever necessary. describe general idea .","code":""},{"path":"/articles/developer-guide.html","id":"workspace","dir":"Articles","previous_headings":"{blockr} structure","what":"Workspace","title":"Developer guide","text":"TBD","code":""},{"path":"/articles/developer-guide.html","id":"stack","dir":"Articles","previous_headings":"{blockr} structure","what":"Stack","title":"Developer guide","text":"stack list blocks. stack able dynamically add new blocks add_block().","code":""},{"path":"/articles/developer-guide.html","id":"modify-a-stack","dir":"Articles","previous_headings":"{blockr} structure > Stack","what":"Modify a stack","title":"Developer guide","text":"add block stack, can leverage add_block(): specify position (last parameter), can add block right given index. instance, command first inserts select block data block. , filter block included right data block. Note can’t add block data block plot block. later version, may add multiple plots per stack.","code":"stack <- new_stack(data_block) |>   add_block(select_block) |>   add_block(filter_block, 1)"},{"path":"/articles/developer-guide.html","id":"moving-blocks","dir":"Articles","previous_headings":"{blockr} structure > Stack","what":"Moving blocks","title":"Developer guide","text":"TBD","code":""},{"path":"/articles/developer-guide.html","id":"blocks","dir":"Articles","previous_headings":"{blockr} structure","what":"Blocks","title":"Developer guide","text":"block structure carrying various information: class: {blockr} leverages S3, class important apply right methods. instance, data block, tranform output blocks different methods (generate_server.data_block, …, respectively). expr: expression evaluated produce block result. result: block output can passed another block. block composed fields gathered list, translated Shiny inputs. fields necessary elements reconstruct block expression subsequently produce result whenever gets evaluated.","code":""},{"path":[]},{"path":"/articles/developer-guide.html","id":"simple-fields","dir":"Articles","previous_headings":"{blockr} structure > Fields","what":"Simple fields","title":"Developer guide","text":"field structure type class. validate_field generic ensures field revelant values. instance, string field, ultimately becomes shiny text input, method validate_field.string_field responsible checking value character string modifies (BELIEVE ’RE MUCH SINCE VALIDATION HAPPEN SHINY SIDE).","code":""},{"path":"/articles/developer-guide.html","id":"more-complex-fields","dir":"Articles","previous_headings":"{blockr} structure > Fields","what":"More complex fields","title":"Developer guide","text":"basic fields, can’t handle dependencies 2 fields. typically happens join block. join datasets, need 2 datasets columns join. Assuming, dataset choice managed field, changing datasets may update possible choices join_by field. shows definition 2 simple fields, one selecting join function (static set choices) another selecting second dataset. handle field depends y? introduce list_field. list_field accepts function generating choices dependency existing fields: by_choices can injected inside new_list_field:","code":"fields <- list(   join_func = new_select_field(     paste(type, \"join\", sep = \"_\"),     paste(join_types, \"join\", sep = \"_\")   ),   y = new_select_field(y[[1]], y),   by = ... ) by_choices <- function(data, y) {     # DEPENDENCY on y     choices <- intersect(       colnames(data),       colnames(eval(as.name(y)))     )      ...      # Return nested field     list(       val = new_select_field(         default,         choices,         multiple = TRUE       )     )   } fields <- list(   join_func = new_select_field(     paste(type, \"join\", sep = \"_\"),     paste(join_types, \"join\", sep = \"_\")   ),   y = new_select_field(y[[1]], y),   by = new_list_field(sub_fields = by_choices) # HERE )"},{"path":"/articles/developer-guide.html","id":"adding-new-fields","dir":"Articles","previous_headings":"","what":"Adding new fields","title":"Developer guide","text":"Fields translated shiny inputs. instance, select_field surprinsingly yields shiny selectInput. quite easy add new field: ./R/field.R, create new new_*_field *_field functions, * field name. ./R/field.R, add specific validation method validate_field.*_field. ./R/ui.R, add ui_input.*_field ui_update.*_field create corresponding HTML element Shiny.","code":""},{"path":"/articles/developer-guide.html","id":"create-a-new-block","dir":"Articles","previous_headings":"","what":"Create a new block","title":"Developer guide","text":"may find situation set existing blocks fully meet needs. exposed helpers can quickly get started creating new block. can call create_block choosing transform plot block. creates new block file R/<name>-block.R. block specific output, may need tweak ./R/server.R: Add server_output.*_block method, * new block name. Add specific generate_server.*_block. include new fields, refer previous section.","code":""},{"path":[]},{"path":"/articles/plot-block.html","id":"anatomy-of-a-ggplot2-plot","dir":"Articles","previous_headings":"Introduction","what":"Anatomy of a {ggplot2} plot","title":"3. Case study: create a plot block","text":"ggplot2, plots built layer layer. starts ggplot() initialises ggplot object passing optional data mappings. , add geoms, like geom_point(). Geoms also accept custom mappings (overwrite mappings passed first ggplot() call), data, well parameters. result, many ways build ggplot: tutorial, go first option.","code":"# 1 ggplot(data = <DATA>, mapping = <MAPPING>) +   geom_point() # 2 ggplot(data = <DATA>) +   geom_point(mapping = <MAPPING>) +   geom_point(mapping = <MAPPING>)  # 3 ggplot() +   geom_point(data = <DATA>, mapping = <MAPPING>) +   geom_point(data = <DATA>, mapping = <MAPPING>)"},{"path":"/articles/plot-block.html","id":"to-do-list","dir":"Articles","previous_headings":"Introduction","what":"To do list","title":"3. Case study: create a plot block","text":"need create? seems obvious add new ggplot_block() geom constructors. Shiny side, handle plot output element. Remember server_output() generic defined {blockr} server.R script. supports tables server_output.block() plots server_output.plot_block(). Therefore, don’t need create another S3 method make sure new plot block inherits plot_block class dispatch correct method. work block side since ’ll generate plot layer layer, layer block. writing vignette, {blockr} support layer layer plots. new concept required expose new way combining plot expressions generate entire stack code. previous infrastructure, : However, handling ggplot2 grammar requires able combine + : process described following, highlight flexibility provided {blockr}.","code":"data %>% block_1 %>% block_2 data %>% plot_block + layer_block"},{"path":[]},{"path":"/articles/plot-block.html","id":"new-evaluate_block-method","dir":"Articles","previous_headings":"Introduction > New block helpers","what":"New evaluate_block() method","title":"3. Case study: create a plot block","text":"define new way pass data block layer, evaluate_block.plot_layer_block() method. consequence, block layer must plot_layer_block class: Compared evaluate_block.transform_block(), simply replaced %>% +. Nothing ! side note, develop method test script, register test :","code":"evaluate_block.plot_layer_block <- function(x, data, ...) {   stopifnot(...length() == 0L)   eval(     substitute(data + expr, list(expr = generate_code(x))),     list(data = data)   ) } .S3method(\"<GENERIC>\", \"<CLASS>\", <METHOD>)"},{"path":"/articles/plot-block.html","id":"generate-a-valid-stack-code","dir":"Articles","previous_headings":"Introduction > New block helpers","what":"Generate a valid stack code","title":"3. Case study: create a plot block","text":"adding layer layer plot blocks, generate_code.stack() : method leverages Reduce() applies binary function combine elements vector (left right default). instance, sum 3 first integers : generate_code.stack() successively combines block expressions given lapply(x, generate_code). 3 blocks stack: binary_substitute called twice: combine x <data_block_EXPR> (data block expression) y <filter_block_EXPR>, give <data_block_EXPR> %>% <filter_block_EXPR>. combine previous result, namely x, equal <data_block_EXPR> %>% <filter_block_EXPR> y equal <select_block_EXPR>. ultimately yields: <data_block_EXPR> %>% <filter_block_EXPR> %>% <select_block_EXPR> substitute() ensures don’t evaluate generated expression replace x y respective values. Can spot current point? combine plot layer expressions linked + setup? order overcome limitation, introduced block_combiner(), new generic aims linking multiple block expressions depending class. hood, check class right block determine expression link (S3 dispatch occurs second block), %>% + (maybe future). Another important modification bring generate_code.stack(). logic, Reduce() consumes block expressions, thereby preventing us able dispatch. pass vector blocks instead, get: empty stacks, returned code arbitrary. stacks one block, don’t need Reduce() call generate_code() corresponding block. create new internal function, aggregate_code, subsequently calling block_combiner(). still one last issue solve. Since now pass blocks, find way let block_combiner() evaluate block expression. apply generate_code() within substitute() call can inject block expression block . eventually leads us : Importantly, plot constructor like ggplot() plot_block class link %>% (transform blocks).","code":"generate_code.stack <- function(x) {    binary_substitute <- function(x, y) {     substitute(x %>% y, list(x = x, y = y))   }    Reduce(binary_substitute, lapply(x, generate_code)) } Reduce(`+`, 1:3) my_stack <- new_stack(data_block, filter_block, select_block) block_combiner <- function(left, right, ...) UseMethod(\"block_combiner\", right) generate_code.stack <- function(x) {   if (length(x) == 0) return(quote(identity()))    # Handles monoblock stacks   if (length(x) > 1) {     aggregate_code <- function(x, y) {       block_combiner(x, y)     }     Reduce(aggregate_code, lapply(x, \\(b) b))   } else {     generate_code(x[[1]])   } } block_combiner.transform_block <- function(left, right, ...) {   substitute(     left %>% right,     list(left = generate_code(left), right = generate_code(right))   ) }  block_combiner.plot_block <- block_combiner.transform_block  block_combiner.plot_layer_block <- function(left, right, ...) {   substitute(     left + right,     list(left = generate_code(left), right = generate_code(right))   ) }"},{"path":"/articles/plot-block.html","id":"create-the-ggplot-block","dir":"Articles","previous_headings":"Introduction","what":"Create the ggplot block","title":"3. Case study: create a plot block","text":"create new block, call new_block() constructor. expects: fields: list field, translated shiny inputs. expr: expression returned block, necessary produce output export code. name: name (randomly choosen, don’t need worry ). class: class dispatch relevant S3 methods. layout: optional layout (default default_layout_fields()). block c(\"ggplot_block\", \"plot_block\") classes, fields pass mappings leave layout default choice. Note mapping field depends provided data. stay simple, assume handle x y aesthetics. finally end new_ggplot_block, internal constructor ggplot_block, user facing constructor. next step create mappings fields two new_select_field(). fields converted shiny inputs, specifically selectInput(). set field choices depend data, define data_cols helper: modify new_ggplot_block : Passing type = \"name\" allows inject functions inside select field choices. useful dynamically update choices whenever data change. Producing expression, certainly “technical” part, involves bit metaprogramming. expression must evaluated block, ’s wrapped quote(). {blockr} able generate expression generate_code() evaluate evaluate_block(). ggplot expression can written : expression, may notice .(), actually required generate_code(). hoods, needed bquote() evaluates arguments wrapped .() variables environment. makes easier use substitute(), since explicitly mark want evaluate. combined together, eventually yields: can, see code base reasonable terms complexity.","code":"new_ggplot_block <- function(data, ...) {   new_block(     fields = list(       # TO DO     ),     expr = quote(),     class = c(\"ggplot_block\", \"plot_block\"),     ...   ) }  ggplot_block <- function(data, ...) {   initialize_block(new_ggplot_block(data, ...), data) } data_cols <- function(data) colnames(data) new_ggplot_block <- function(data, ...) {    data_cols <- function(data) colnames(data)    new_block(     fields = list(       x = new_select_field(colnames(data)[1], data_cols, type = \"name\"),       y = new_select_field(colnames(data)[2], data_cols, type = \"name\")     ),     expr = quote(),     class = c(\"ggplot_block\", \"plot_block\"),     ...   ) } ggplot(mapping = aes(x = .(x), y = .(y))) new_ggplot_block <- function(data, ...) {    data_cols <- function(data) colnames(data)    new_block(     fields = list(       x = new_select_field(colnames(data)[1], data_cols, type = \"name\"),       y = new_select_field(colnames(data)[2], data_cols, type = \"name\")     ),     expr = quote(       ggplot(mapping = aes(x = .(x), y = .(y)))     ),     class = c(\"ggplot_block\", \"plot_block\"),     ...   ) }"},{"path":"/articles/plot-block.html","id":"create-a-geom-block","dir":"Articles","previous_headings":"Introduction","what":"Create a geom block","title":"3. Case study: create a plot block","text":"Now valid ggplot_block, want add geometry. easiest one geom_point(). keep vignette simple possible, handle one option, namely point color. host information new_select_field(), instance: expression straightforward get: Importantly, since use .(color), field name must color. finally gives us: Note class plot_layer_block. necessary invoke corresponding evaluate_block() method (use + instead %>%).","code":"new_select_field(\"blue\", c(\"blue\", \"green\", \"red\")) geom_point(color = .(color)) # Don't forget to wrap it with quote(...). new_geompoint_block <- function(data, ...) {    new_block(     fields = list(       color = new_select_field(\"blue\", c(\"blue\", \"green\", \"red\"))     ),     expr = quote(       geom_point(color = .(color))     ),     class = c(\"plot_layer_block\", \"plot_block\"),     ...   ) }  geompoint_block <- function(data, ...) {   initialize_block(new_geompoint_block(data, ...), data) }"},{"path":"/articles/plot-block.html","id":"try-it","dir":"Articles","previous_headings":"Introduction","what":"Try it","title":"3. Case study: create a plot block","text":"can try following stack:","code":"stack <- new_stack(data_block, ggplot_block, geompoint_block) serve_stack(stack)"},{"path":"/articles/plot-block.html","id":"going-further","dir":"Articles","previous_headings":"Introduction","what":"Going further","title":"3. Case study: create a plot block","text":"Toggle code","code":"library(blockr) library(ggplot2) library(ggiraph)  custom_data_block <- function(...) {   initialize_block(     new_data_block(       ...,       selected = \"mtcars\"     )   ) }  new_ggplot_block <- function(data, ...) {    data_cols <- function(data) colnames(data)    new_block(     fields = list(       x = new_select_field(\"wt\", data_cols, type = \"name\"),       y = new_select_field(\"qsec\", data_cols, type = \"name\"),       color = new_select_field(\"disp\", data_cols, type = \"name\")     ),     expr = quote(       ggplot(mapping = aes(x = .(x), y = .(y), color = .(color)))     ),     class = c(\"ggplot_block\", \"plot_block\"),     ...   ) }  ggplot_block <- function(data, ...) {   initialize_block(new_ggplot_block(data, ...), data) }  # We could have use a mutate_block instead of # changing the data from inside the block ... # {blockr} is flexible here. new_geompoint_interactive_block <- function(data, ...) {   build_expr <- function(data) {     # Get data from the previous ggplot layer     # data is the ggplot so we need to use data$data     # to get the initial data     data$data$carname <- row.names(data$data)     substitute(       geom_point_interactive(         # Pass in new data         data = new_data,         aes(           tooltip = carname,           data_id = carname         )       ),       list(new_data = data$data)     )   }    new_block(     fields = list(       expression = new_hidden_field(build_expr)     ),     expr = quote(.(expression)),     class = c(\"plot_layer_block\", \"plot_block\"),     ...   ) }  geompoint_interactive_block <- function(data, ...) {   initialize_block(new_geompoint_interactive_block(data, ...), data) }  new_theme_block <- function(data, ...) {   new_block(     fields = list(       theme = new_select_field(         \"theme_minimal\",          grep(\"^theme_.*$\", ls(\"package:ggplot2\"), perl = TRUE, value = TRUE),         type = \"name\"       )     ),     expr = quote(       .(theme)()     ),     class = c(\"plot_layer_block\", \"plot_block\"),     ...   ) }  theme_block <- function(data, ...) {   initialize_block(new_theme_block(data, ...), data) }  new_ggiraph_block <- function(data, ...) {   new_block(     fields = list(       pointsize = new_numeric_field(12, min = 1, max = 20)     ),     expr = quote(       girafe(ggobj = data, pointsize = .(pointsize))     ),     class = c(\"ggiraph_block\", \"plot_block\"),     ...   ) }  ggiraph_block <- function(data, ...) {   initialize_block(new_ggiraph_block(data, ...), data) }  stack <- new_stack(   custom_data_block,   ggplot_block,   geompoint_interactive_block,   theme_block,   ggiraph_block ) serve_stack(stack)"},{"path":"/articles/registry.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"2. Blocks registry","text":"registry environment provides access multiple blocks well metadata: block description. Allowed input (default data.frame, expect data_block blocks) Returned output. …","code":""},{"path":"/articles/registry.html","id":"previewing-available-blocks","dir":"Articles","previous_headings":"","what":"Previewing available blocks","title":"2. Blocks registry","text":"Upon loading, {blockr} registers internal blocks register_blockr_blocks(). won’t call function exported anyway. makes registry environment ready queried available_blocks(). truncated output example :","code":"$dataset_block function(...) {   initialize_block(new_data_block(...)) } <environment: namespace:blockr> attr(,\"name\") [1] \"data block\" attr(,\"description\") [1] \"choose a dataset\" attr(,\"classes\") [1] \"dataset_block\" \"data_block\"    attr(,\"input\") [1] NA attr(,\"output\") [1] \"data.frame\" attr(,\"package\") [1] \"blockr\" attr(,\"class\") [1] \"block_descr\"  $select_block function(data, ...) {   initialize_block(new_select_block(data, ...), data) } <environment: namespace:blockr> attr(,\"name\") [1] \"select block\" attr(,\"description\") [1] \"select columns in a table\" attr(,\"classes\") [1] \"select_block\"    \"transform_block\" attr(,\"input\") [1] \"data.frame\" attr(,\"output\") [1] \"data.frame\" attr(,\"package\") [1] \"blockr\" attr(,\"class\") [1] \"block_descr\" names(available_blocks()) #>  [1] \"arrange_block\"      \"csv_block\"          \"dataset_block\"      #>  [4] \"filesbrowser_block\" \"filter_block\"       \"group_by_block\"     #>  [7] \"head_block\"         \"join_block\"         \"json_block\"         #> [10] \"mutate_block\"       \"rds_block\"          \"result_block\"       #> [13] \"sas_block\"          \"select_block\"       \"summarize_block\"    #> [16] \"upload_block\"       \"xpt_block\""},{"path":"/articles/registry.html","id":"register-a-block","dir":"Articles","previous_headings":"","what":"Register a block","title":"2. Blocks registry","text":"register blocks, user facing functions : register_block() register block registry. block already registered, overwrites existing one. register_blocks() register multiple blocks. Let’s say want create new head_block returns n first rows selected dataset: now query registry, new block available: can now run demo app add blocks. new head_block visible new choices: register multiple blocks:","code":"new_head_block <- function(data, n_rows = numeric(), ...) {    new_block(     fields = list(       n_rows = new_numeric_field(n_rows, 1L, 100L)     ),     expr = quote(head(n = .(n_rows))),     class = c(\"head_block\", \"transform_block\"),     ...   ) }  register_block(   constructor = new_head_block,   name = \"head block\",   description = \"return first n rows\",   classes = c(\"head_block\", \"transform_block\"),   input = \"data.frame\",   output = \"data.frame\" ) #> Warning in register_block(constructor = new_head_block, name = \"head block\", : #> block head_block already exists and will be overwritten. names(available_blocks()) #>  [1] \"arrange_block\"      \"csv_block\"          \"dataset_block\"      #>  [4] \"filesbrowser_block\" \"filter_block\"       \"group_by_block\"     #>  [7] \"head_block\"         \"join_block\"         \"json_block\"         #> [10] \"mutate_block\"       \"rds_block\"          \"result_block\"       #> [13] \"sas_block\"          \"select_block\"       \"summarize_block\"    #> [16] \"upload_block\"       \"xpt_block\" register_blocks(   constructor = c(     data_block, filter_block, select_block, summarize_block   ),   name = c(     \"data block\", \"filter block\", \"select block\", \"summarize block\"   ),   description = c(     \"choose a dataset\",     \"filter rows in a table\",     \"select columns in a table\",     \"summarize data groups\"   ),   classes = list(     c(\"dataset_block\", \"data_block\"),     c(\"filter_block\", \"transform_block\", \"submit_block\"),     c(\"select_block\", \"transform_block\"),     c(\"summarize_block\", \"transform_block\", \"submit_block\")   ),   input = c(NA_character_, \"data.frame\", \"data.frame\", \"data.frame\"),   output = c(\"data.frame\", \"data.frame\", \"data.frame\", \"data.frame\"),   package = pkg )"},{"path":"/articles/registry.html","id":"unregister-a-block","dir":"Articles","previous_headings":"","what":"Unregister a block","title":"2. Blocks registry","text":"counterpart register_block() unregister_blocks(). can remove new head_block registry: ids first entry applied class attributes block created, head_block. remove multiple blocks , can pass vector ids.","code":"unregister_blocks(ids = \"head_block\")  # Check it out names(available_blocks()) #>  [1] \"arrange_block\"      \"csv_block\"          \"dataset_block\"      #>  [4] \"filesbrowser_block\" \"filter_block\"       \"group_by_block\"     #>  [7] \"join_block\"         \"json_block\"         \"mutate_block\"       #> [10] \"rds_block\"          \"result_block\"       \"sas_block\"          #> [13] \"select_block\"       \"summarize_block\"    \"upload_block\"       #> [16] \"xpt_block\""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas Bennett. Author, maintainer. David Granjon. Author. John Coene. Author. Bristol Myers Squibb. Copyright holder, funder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bennett N, Granjon D, Coene J (2024). blockr: block-based framework data manipulation visualization. R package version 0.0.1.9000.","code":"@Manual{,   title = {blockr: A block-based framework for data manipulation and visualization},   author = {Nicolas Bennett and David Granjon and John Coene},   year = {2024},   note = {R package version 0.0.1.9000}, }"},{"path":"/index.html","id":"blockr","dir":"","previous_headings":"","what":"A block-based framework for data manipulation and visualization","title":"A block-based framework for data manipulation and visualization","text":"Building blocks data manipulation visualization operations. {blockr} built webR (wasm) available download webr::install(\"blockr\", repos = \"https://blockr-org.github.io/webr-repos\").","code":"library(blockr) library(blockr.data)  stack <- new_stack(   data_block,   select_block ) serve_stack(stack)"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A block-based framework for data manipulation and visualization","text":"can install development version blockr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"blockr-org/blockr\")"},{"path":"/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"A block-based framework for data manipulation and visualization","text":"Easiest run make, otherwise: Install npm dependencies packer::npm_install() Build CSS running script dev/sass.R","code":""},{"path":"/reference/add_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Add block to a stack — add_block","title":"Add block to a stack — add_block","text":"called oustide stack modules.","code":""},{"path":"/reference/add_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add block to a stack — add_block","text":"","code":"add_block(stack, block, position = NULL)"},{"path":"/reference/add_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add block to a stack — add_block","text":"stack stack update. See new_stack. block Block insert. position insert new block. NULL, block added last position.","code":""},{"path":"/reference/add_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add block to a stack — add_block","text":"Invisibly returns stack.","code":""},{"path":"/reference/add_block_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Add block UI interface — add_block_ui","title":"Add block UI interface — add_block_ui","text":"Useful allow stack add blocks . selected block can accessed input$selected_block. Combined blocks registry API, allows select block R like available_blocks()[[input$selected_block]].","code":""},{"path":"/reference/add_block_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add block UI interface — add_block_ui","text":"","code":"add_block_ui(ns = identity)"},{"path":"/reference/add_block_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add block UI interface — add_block_ui","text":"ns Stack namespace. Default identity can used stack top level element.","code":""},{"path":"/reference/arrange_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange block — new_arrange_block","title":"Arrange block — new_arrange_block","text":"block provides access arrange verb returns dataframe.","code":""},{"path":"/reference/arrange_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange block — new_arrange_block","text":"","code":"new_arrange_block(data, columns = colnames(data)[1], ...)  arrange_block(data, ...)"},{"path":"/reference/arrange_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange block — new_arrange_block","text":"data Tabular data select columns. columns Column(s) select. ... (metadata) attributes","code":""},{"path":"/reference/available_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Block registry — available_blocks","title":"Block registry — available_blocks","text":"List available blocks.","code":""},{"path":"/reference/available_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block registry — available_blocks","text":"","code":"available_blocks()  block_name(blocks = available_blocks())  block_descr(blocks = available_blocks())  register_block(   constructor,   name,   description,   classes,   input,   output,   package = NA_character_ )  register_blocks(   constructor,   name,   description,   classes,   input,   output,   package = NA_character_ )  unregister_blocks(ids = NULL, package = NULL)  construct_block(block, ...)"},{"path":"/reference/available_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block registry — available_blocks","text":"blocks Block description object(s) constructor Block constructor name, description Metadata describing block classes Block classes input, output Object types block consumes produces package Package block defined ids Character vector block IDs (first entry class attribute) block Block name description object ... Forwarded register_block()","code":""},{"path":"/reference/block_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Block body generic — block_body","title":"Block body generic — block_body","text":"Generic creating fields UI container","code":""},{"path":"/reference/block_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block body generic — block_body","text":"","code":"block_body(x, ...)  # S3 method for block block_body(x, ns, inputs_hidden, ...)"},{"path":"/reference/block_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block body generic — block_body","text":"x Object generate UI components ... Generic consistency ns Module namespace inputs_hidden styling purposes: CSS class apply block collapsed.","code":""},{"path":"/reference/block_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Block code generic — block_code","title":"Block code generic — block_code","text":"Generic creating block code UI elements toggle code container.","code":""},{"path":"/reference/block_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block code generic — block_code","text":"","code":"block_code(x, ...)  # S3 method for block block_code(x, ns, inputs_hidden, ...)"},{"path":"/reference/block_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block code generic — block_code","text":"x Object generate UI components ... Generic consistency ns Module namespace inputs_hidden styling purposes: CSS class apply block collapsed.","code":""},{"path":"/reference/block_combiner.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine 2 block expressions — block_combiner","title":"Combine 2 block expressions — block_combiner","text":"Useful generate_code.","code":""},{"path":"/reference/block_combiner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine 2 block expressions — block_combiner","text":"","code":"block_combiner(left, right, ...)  # S3 method for transform_block block_combiner(left, right, ...)  # S3 method for plot_block block_combiner(left, right, ...)  # S3 method for plot_layer_block block_combiner(left, right, ...)"},{"path":"/reference/block_combiner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine 2 block expressions — block_combiner","text":"left Left block object x %>% y. right Right block object x %>% y. ... generic consistency.","code":""},{"path":"/reference/block_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Block header generic — block_header","title":"Block header generic — block_header","text":"Generic creating block header.","code":""},{"path":"/reference/block_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block header generic — block_header","text":"","code":"block_header(x, ...)  # S3 method for block block_header(x, ns, hidden_class, ...)"},{"path":"/reference/block_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block header generic — block_header","text":"x Object generate UI components ... Generic consistency ns Module namespace hidden_class TBD.","code":""},{"path":"/reference/block_icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Block icon generic — block_icon","title":"Block icon generic — block_icon","text":"Create block icon depending block class","code":""},{"path":"/reference/block_icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block icon generic — block_icon","text":"","code":"block_icon(x, ...)  # S3 method for default block_icon(x, ...)  # S3 method for data_block block_icon(x, ...)  # S3 method for transform_block block_icon(x, ...)  # S3 method for plot_block block_icon(x, ...)"},{"path":"/reference/block_icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block icon generic — block_icon","text":"x Object inheriting \"block\". ... generic consistency.","code":""},{"path":"/reference/blockr_serialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialization — blockr_serialize","title":"Serialization — blockr_serialize","text":"Object (de)serialization.","code":""},{"path":"/reference/blockr_serialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialization — blockr_serialize","text":"","code":"blockr_serialize(x)  # S3 method for field blockr_serialize(x)  # S3 method for block blockr_serialize(x)  # S3 method for stack blockr_serialize(x)  # S3 method for workspace blockr_serialize(x)  blockr_deserialize(x)  from_json(x)  to_json(x = get_workspace())"},{"path":"/reference/blockr_serialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialization — blockr_serialize","text":"x Object (de)serialize","code":""},{"path":"/reference/create_app_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Create shinylive iframe — create_app_link","title":"Create shinylive iframe — create_app_link","text":"Create shinylive iframe","code":""},{"path":"/reference/create_app_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create shinylive iframe — create_app_link","text":"","code":"create_app_link(app_code, mode = c(\"app\", \"editor\"), header = TRUE)"},{"path":"/reference/create_app_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create shinylive iframe — create_app_link","text":"app_code base64 app code. can create https://shinylive.io/r writing code click share copy link. code located end url. mode display shinylive app. Default app mode. header Whether display shinylive header. Default TRUE.","code":""},{"path":"/reference/create_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new block — create_block","title":"Create a new block — create_block","text":"Create new block","code":""},{"path":"/reference/create_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new block — create_block","text":"","code":"create_block(name, type = c(\"transform\", \"plot\"), file = NULL)"},{"path":"/reference/create_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new block — create_block","text":"name Block name. type Type block create. file Output file. NULL constructs R/<name>-block.R.","code":""},{"path":"/reference/create_modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and show a Bootstrap modal — create_modal","title":"Create and show a Bootstrap modal — create_modal","text":"TBD.","code":""},{"path":"/reference/create_modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and show a Bootstrap modal — create_modal","text":"","code":"create_modal(...)"},{"path":"/reference/create_modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and show a Bootstrap modal — create_modal","text":"... Modal content.","code":""},{"path":"/reference/data_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Data block constructor — new_data_block","title":"Data block constructor — new_data_block","text":"block allows selected data package, default datasets.","code":""},{"path":"/reference/data_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data block constructor — new_data_block","text":"","code":"new_data_block(   ...,   dat = as.environment(\"package:datasets\"),   selected = character() )  data_block(...)"},{"path":"/reference/data_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data block constructor — new_data_block","text":"... (metadata) attributes dat Multiple datasets. selected Selected dataset.","code":""},{"path":"/reference/data_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Data info generic — data_info","title":"Data info generic — data_info","text":"Generic creating data info tags, display number columns, rows, ...","code":""},{"path":"/reference/data_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data info generic — data_info","text":"","code":"data_info(x, ...)  # S3 method for block data_info(x, ns, ...)  # S3 method for data_block data_info(x, ns, ...)  # S3 method for transform_block data_info(x, ns, ...)"},{"path":"/reference/data_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data info generic — data_info","text":"x Object generate UI components ... Generic consistency ns Module namespace","code":""},{"path":"/reference/download_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Block download generic — download_ui","title":"Block download generic — download_ui","text":"Generic create block download button.","code":""},{"path":"/reference/download_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block download generic — download_ui","text":"","code":"download_ui(x, ...)  # S3 method for block download_ui(x, ns, inputs_hidden = FALSE, ...)  # S3 method for transform_block download_ui(x, ns, inputs_hidden = FALSE, ...)  # S3 method for data_block download_ui(x, ns, inputs_hidden = FALSE, ...)  # S3 method for plot_block download_ui(x, ns, inputs_hidden = FALSE, ...)"},{"path":"/reference/download_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block download generic — download_ui","text":"x Object generate UI components ... Generic consistency ns Module namespace inputs_hidden styling purposes: CSS class apply block collapsed.","code":""},{"path":"/reference/evaluate_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a block generic — evaluate_block","title":"Evaluate a block generic — evaluate_block","text":"Calls generate_code evaluate relevant environment.","code":""},{"path":"/reference/evaluate_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a block generic — evaluate_block","text":"","code":"evaluate_block(x, ...)  # S3 method for data_block evaluate_block(x, ...)  # S3 method for transform_block evaluate_block(x, data, ...)  # S3 method for plot_block evaluate_block(x, data, ...)  # S3 method for plot_layer_block evaluate_block(x, data, ...)"},{"path":"/reference/evaluate_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a block generic — evaluate_block","text":"x object inheriting \"block\" ... generic consistency. data Result previous block","code":""},{"path":"/reference/exprs_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a UI element for expressions — exprs_ui","title":"Create a UI element for expressions — exprs_ui","text":"function generates UI element inputting expressions Shiny application. includes two shinyAce::aceEditor elements inputting name value new column.","code":""},{"path":"/reference/exprs_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a UI element for expressions — exprs_ui","text":"","code":"exprs_ui(   id = \"\",   value_name = \"newcol\",   value_val = NULL,   delete_button = TRUE,   key = c(\"suggest\", \"empty\", \"none\"),   auto_complete_list = NULL )"},{"path":"/reference/exprs_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a UI element for expressions — exprs_ui","text":"id Character string, identifier UI element. value_name Default name new column. value_val Default value new column. delete_button delete button shown? key display 'key' field auto_complete_list auto_complete_list, passed shinyAce::aceEditor()","code":""},{"path":"/reference/exprs_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a UI element for expressions — exprs_ui","text":"div element containing UI components.","code":""},{"path":"/reference/exprs_ui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a UI element for expressions — exprs_ui","text":"","code":"if (FALSE) { library(shiny) library(shinyAce) shinyApp(   ui = bslib::page_fluid(     exprs_ui(value_name = \"bla\", value_val = \"blabla\")   ),   server = function(input, output) {} ) }"},{"path":"/reference/filesbrowser_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Files browser block constructor — new_filesbrowser_block","title":"Files browser block constructor — new_filesbrowser_block","text":"block allows browse files server app running. falls back user file system running locally. block outputs string containing file path.","code":""},{"path":"/reference/filesbrowser_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Files browser block constructor — new_filesbrowser_block","text":"","code":"new_filesbrowser_block(volumes = c(home = path.expand(\"~\")), ...)  filesbrowser_block(...)"},{"path":"/reference/filesbrowser_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Files browser block constructor — new_filesbrowser_block","text":"volumes Paths accessible shinyFiles browser. ... (metadata) attributes","code":""},{"path":"/reference/filesbrowser_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Files browser field constructor — new_filesbrowser_field","title":"Files browser field constructor — new_filesbrowser_field","text":"Files browser fields translated shinyFilesButton","code":""},{"path":"/reference/filesbrowser_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Files browser field constructor — new_filesbrowser_field","text":"","code":"new_filesbrowser_field(value = character(), ...)  filesbrowser_field(...)"},{"path":"/reference/filesbrowser_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Files browser field constructor — new_filesbrowser_field","text":"value Default text input value. ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/filter_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter block — new_filter_block","title":"Filter block — new_filter_block","text":"block provides access filter verb returns filtered data.","code":""},{"path":"/reference/filter_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter block — new_filter_block","text":"","code":"new_filter_block(   data,   columns = colnames(data)[1L],   values = character(),   filter_fun = \"==\",   ... )  filter_block(data, ...)"},{"path":"/reference/filter_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter block — new_filter_block","text":"data Tabular data filter (rows). columns Definition equality filter. values Definition equality filter. filter_fun Default filter fun expression. ... (metadata) attributes","code":""},{"path":"/reference/generate_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate code generic — generate_code","title":"Generate code generic — generate_code","text":"given block, generate code contained expr attribute. Needed evaluate_block block_combiner generate entire stack code.","code":""},{"path":"/reference/generate_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate code generic — generate_code","text":"","code":"generate_code(x)  # S3 method for block generate_code(x)  # S3 method for arrange_block generate_code(x)  # S3 method for transform_block generate_code(x)  # S3 method for plot_block generate_code(x)  # S3 method for data_block generate_code(x)  # S3 method for call generate_code(x)"},{"path":"/reference/generate_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate code generic — generate_code","text":"x object inheriting \"block\"","code":""},{"path":"/reference/generate_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for server generation — generate_server","title":"Generic for server generation — generate_server","text":"Calls shiny modules given element (workspace, stack, block).","code":""},{"path":"/reference/generate_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for server generation — generate_server","text":"","code":"generate_server(x, ...)  # S3 method for result_field generate_server(x, ...)  # S3 method for data_block generate_server(x, id, ...)  # S3 method for transform_block generate_server(x, in_dat, id, ...)  # S3 method for plot_block generate_server(x, in_dat, id, ...)  # S3 method for stack generate_server(   x,   id = NULL,   new_block = NULL,   workspace = get_workspace(),   ... )  # S3 method for workspace generate_server(x, id, ...)"},{"path":"/reference/generate_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for server generation — generate_server","text":"x Object generate moduleServer() ... Generic consistency id Unique module id. Useful workspace called module. in_dat Reactive input data new_block dynamically inserted blocks. workspace Stack workspace","code":""},{"path":"/reference/generate_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI — generate_ui","title":"UI — generate_ui","text":"Generic UI generation","code":""},{"path":"/reference/generate_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI — generate_ui","text":"","code":"generate_ui(x, ...)  # S3 method for block generate_ui(x, id, ..., .hidden = !getOption(\"BLOCKR_DEV\", FALSE))  # S3 method for stack generate_ui(x, id = NULL, ...)  # S3 method for workspace generate_ui(x, id, ...)  # S3 method for list_field input_ids(x, name, ...)"},{"path":"/reference/generate_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI — generate_ui","text":"x Object generate UI components ... Generic consistency id UI IDs .hidden Whether initialise block hidden. name Input name.","code":""},{"path":"/reference/group_by_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by block — new_group_by_block","title":"Group by block — new_group_by_block","text":"block provides access group_by verb returns dataframe.","code":""},{"path":"/reference/group_by_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by block — new_group_by_block","text":"","code":"new_group_by_block(data, columns = colnames(data)[1], ...)  group_by_block(data, ...)"},{"path":"/reference/group_by_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by block — new_group_by_block","text":"data Tabular data select columns. columns Column(s) select. ... (metadata) attributes","code":""},{"path":"/reference/handle_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove stack/block generic — handle_remove","title":"Remove stack/block generic — handle_remove","text":"Generic stack/block removal Necessary able remove block stack.","code":""},{"path":"/reference/handle_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove stack/block generic — handle_remove","text":"","code":"handle_remove(x, ...)  # S3 method for block handle_remove(x, vals, session = getDefaultReactiveDomain(), ...)"},{"path":"/reference/handle_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove stack/block generic — handle_remove","text":"x Object generate moduleServer() ... Generic consistency vals Internal reactive values. session Shiny session object.","code":""},{"path":"/reference/head_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Head block — new_head_block","title":"Head block — new_head_block","text":"allows select first n rows input dataframe.","code":""},{"path":"/reference/head_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Head block — new_head_block","text":"","code":"new_head_block(data, n_rows = numeric(), n_rows_min = 1L, ...)  head_block(data, ...)"},{"path":"/reference/head_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Head block — new_head_block","text":"data Tabular data select columns. n_rows Number rows return. n_rows_min Minimum number rows. ... (metadata) attributes","code":""},{"path":"/reference/hidden_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Hidden field constructor — new_hidden_field","title":"Hidden field constructor — new_hidden_field","text":"Hidden field useful host complex expression field. See filter_block usecase.","code":""},{"path":"/reference/hidden_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hidden field constructor — new_hidden_field","text":"","code":"new_hidden_field(value = expression(), ...)  hidden_field(...)"},{"path":"/reference/hidden_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hidden field constructor — new_hidden_field","text":"value Default text input value. ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for server initialisation — init","title":"Generic for server initialisation — init","text":"Handle initialisation workspace, stacks, ...","code":""},{"path":"/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for server initialisation — init","text":"","code":"init(x, ...)  # S3 method for workspace init(x, vals, session, ...)  # S3 method for stack init(x, vals, ...)"},{"path":"/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for server initialisation — init","text":"x Object generate moduleServer() ... Generic consistency vals Internal reactive values. session Shiny session object.","code":""},{"path":"/reference/init_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Init a single block — init_block","title":"Init a single block — init_block","text":"Useful init.blocks also called add_block.","code":""},{"path":"/reference/init_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Init a single block — init_block","text":"","code":"init_block(i, vals)"},{"path":"/reference/init_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Init a single block — init_block","text":"Block position vals Reactive values containing stack","code":""},{"path":"/reference/init_lock.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise Lock Initialises the lock reactive value. — init_lock","title":"Initialise Lock Initialises the lock reactive value. — init_lock","text":"Initialise Lock Initialises lock reactive value.","code":""},{"path":"/reference/init_lock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise Lock Initialises the lock reactive value. — init_lock","text":"","code":"init_lock(session = shiny::getDefaultReactiveDomain(), ignore_init = FALSE)"},{"path":"/reference/init_lock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise Lock Initialises the lock reactive value. — init_lock","text":"session Shiny session. ignore_init Whether ignore initialisation. used need initialise lock toggle_lock().","code":""},{"path":"/reference/initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 generic for initialization — is_initialized","title":"S3 generic for initialization — is_initialized","text":"Checks block field (currently implemented methods) initialized.","code":""},{"path":"/reference/initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 generic for initialization — is_initialized","text":"","code":"is_initialized(x)  # S3 method for block is_initialized(x)  # S3 method for field is_initialized(x)"},{"path":"/reference/initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 generic for initialization — is_initialized","text":"x Element check.","code":""},{"path":"/reference/initialize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 generic for initialization — is_initialized","text":"Boolean value.","code":""},{"path":"/reference/initialize_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize block generic — initialize_block","title":"Initialize block generic — initialize_block","text":"Initializes fields composing block.","code":""},{"path":"/reference/initialize_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize block generic — initialize_block","text":"","code":"initialize_block(x, ...)  # S3 method for data_block initialize_block(x, ...)  # S3 method for transform_block initialize_block(x, data, ...)  # S3 method for default initialize_block(x, data, ...)  # S3 method for plot_block initialize_block(x, data, ...)"},{"path":"/reference/initialize_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize block generic — initialize_block","text":"x object inheriting \"block\" ... generic consistency. data Result previous block","code":""},{"path":"/reference/initialize_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize block generic — initialize_block","text":"block element.","code":""},{"path":[]},{"path":"/reference/initialize_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize field generic — initialize_field","title":"Initialize field generic — initialize_field","text":"TBD","code":""},{"path":"/reference/initialize_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize field generic — initialize_field","text":"","code":"initialize_field(x, env = list())  # S3 method for field initialize_field(x, env = list())"},{"path":"/reference/initialize_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize field generic — initialize_field","text":"x object inheriting form \"field\" env Environment data field values","code":""},{"path":"/reference/initialize_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize field generic — initialize_field","text":"field.","code":""},{"path":"/reference/inject_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject block into stack — inject_block","title":"Inject block into stack — inject_block","text":"Called workspace.","code":""},{"path":"/reference/inject_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject block into stack — inject_block","text":"","code":"inject_block(input, vals, id)"},{"path":"/reference/inject_remove_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject remove button into block header — inject_remove_button","title":"Inject remove button into block header — inject_remove_button","text":"called stack parent namespace. can also called dynamically inserting new block within stack. called workspace parent namespace. can also called dynamically inserting new stack within workspace.","code":""},{"path":"/reference/inject_remove_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject remove button into block header — inject_remove_button","text":"","code":"inject_remove_button(x, ...)  # S3 method for block inject_remove_button(x, ns, .hidden = !getOption(\"BLOCKR_DEV\", FALSE), ...)  # S3 method for stack inject_remove_button(x, id, ...)"},{"path":"/reference/inject_remove_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject remove button into block header — inject_remove_button","text":"x Object generate UI components ... Generic consistency ns Parent namespace. .hidden Whether initialise block hidden inputs. id Parent ID","code":""},{"path":"/reference/is_whole.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if number is whole — is_whole","title":"Check if number is whole — is_whole","text":"Check number whole","code":""},{"path":"/reference/is_whole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if number is whole — is_whole","text":"","code":"is_whole(n = 0L)"},{"path":"/reference/is_whole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if number is whole — is_whole","text":"n Number check.","code":""},{"path":"/reference/join_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Join block — new_join_block","title":"Join block — new_join_block","text":"block provides access dplyr join verbs returns dataframe. blocks made work multiple stack y parameter expects dataframe another stack.","code":""},{"path":"/reference/join_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join block — new_join_block","text":"","code":"new_join_block(data, y = NULL, type = character(), by = character(), ...)  join_block(data, ...)"},{"path":"/reference/join_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join block — new_join_block","text":"data Tabular data select columns. y Second dataset join. type Join type. Join columns. ... (metadata) attributes","code":""},{"path":"/reference/keyvalue_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Key Value Field server — generate_server.keyvalue_field","title":"Key Value Field server — generate_server.keyvalue_field","text":"Server module TBD","code":""},{"path":"/reference/keyvalue_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Key Value Field server — generate_server.keyvalue_field","text":"","code":"# S3 method for keyvalue_field generate_server(x, ...)  # S3 method for keyvalue_field ui_input(x, id, name)  new_keyvalue_field(   value = NULL,   multiple = TRUE,   submit = TRUE,   key = c(\"suggest\", \"empty\", \"none\"),   ... )  keyvalue_field(...)"},{"path":"/reference/keyvalue_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Key Value Field server — generate_server.keyvalue_field","text":"x Object generate UI components ... Generic consistency id UI IDs name Field name. value Field value multiple Allow multiple selection submit 'submit button' shown? key display 'key' field","code":""},{"path":"/reference/layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Default layout for fields Default layout for fields, places fields on rows and collapses parts of inputs when there are too many. — layout","title":"Default layout for fields Default layout for fields, places fields on rows and collapses parts of inputs when there are too many. — layout","text":"Default layout fields Default layout fields, places fields rows collapses parts inputs many.","code":""},{"path":"/reference/layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default layout for fields Default layout for fields, places fields on rows and collapses parts of inputs when there are too many. — layout","text":"","code":"layout(x, fields, ...)"},{"path":"/reference/layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default layout for fields Default layout for fields, places fields on rows and collapses parts of inputs when there are too many. — layout","text":"x Object (block). fields Named list fields. ... Currently ignored.","code":""},{"path":"/reference/layout_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout fields on rows. — layout_fields","title":"Layout fields on rows. — layout_fields","text":"Layout fields rows.","code":""},{"path":"/reference/layout_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout fields on rows. — layout_fields","text":"","code":"layout_fields(fields)"},{"path":"/reference/list_field.html","id":null,"dir":"Reference","previous_headings":"","what":"List field constructor — new_list_field","title":"List field constructor — new_list_field","text":"field can contain subfields. See filter_block usecase.","code":""},{"path":"/reference/list_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List field constructor — new_list_field","text":"","code":"new_list_field(value = list(), sub_fields = list(), ...)  list_field(...)"},{"path":"/reference/list_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List field constructor — new_list_field","text":"value Default text input value. sub_fields Fields contained list_field ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/lock.html","id":null,"dir":"Reference","previous_headings":"","what":"Lock — lock","title":"Lock — lock","text":"Lock edit stacks blocks.","code":""},{"path":"/reference/lock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lock — lock","text":"","code":"lock(session = shiny::getDefaultReactiveDomain())  unlock(session = shiny::getDefaultReactiveDomain())  toggle_lock(session = shiny::getDefaultReactiveDomain())  is_locked(session = shiny::getDefaultReactiveDomain())  observe_lock(fn, ..., session = shiny::getDefaultReactiveDomain())"},{"path":"/reference/lock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lock — lock","text":"session Shiny session. fn Callback function run editing locked/unlocked. must accept single argument, boolean indicating whether editing locked . ... passed shiny::observeEvent().","code":""},{"path":"/reference/mutate_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate block constructor — new_mutate_block","title":"Mutate block constructor — new_mutate_block","text":"Leverages keyvalue_field","code":""},{"path":"/reference/mutate_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate block constructor — new_mutate_block","text":"","code":"new_mutate_block(data, value = NULL, ...)  mutate_block(data, ...)"},{"path":"/reference/mutate_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate block constructor — new_mutate_block","text":"data Tabular data select columns. value Default value. ... (metadata) attributes","code":""},{"path":"/reference/new_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Blocks — new_block","title":"Blocks — new_block","text":"Blocks consist set fields, expression defines block produces (given result previous block combined user input), plus meta data.","code":""},{"path":"/reference/new_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blocks — new_block","text":"","code":"new_block(fields, expr, name = rand_names(), ..., class = character())  is_block(x)"},{"path":"/reference/new_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blocks — new_block","text":"fields list field, entry inheriting \"field\" expr quoted expression (compatible partial substitution implemented base::bquote() intended evaluation context fields) name Block name ... (metadata) attributes class Block subclass x object inheriting \"block\"","code":""},{"path":"/reference/new_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Fields — new_field","title":"Fields — new_field","text":"block consists set fields, define type value field holds can used customize UI generated.","code":""},{"path":"/reference/new_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fields — new_field","text":"","code":"new_field(   value,   ...,   type = c(\"literal\", \"name\"),   title = \"\",   descr = \"\",   status = c(\"active\", \"disabled\", \"invisible\"),   class = character(),   exclude = FALSE )  is_field(x)"},{"path":"/reference/new_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fields — new_field","text":"value Field value ... field components type Field type (allowed values \"literal\" \"name\") title brief title field, primarily display purposes. descr description field, explaining purpose usage. status status field (experimental) class Field subclass exclude Experimental: Exclude field captured update_fields feature. Default FALSE. yet used. x object inheriting form \"field\"","code":""},{"path":"/reference/new_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacks — new_stack","title":"Stacks — new_stack","text":"set blocks can assembled stack.","code":""},{"path":"/reference/new_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacks — new_stack","text":"","code":"new_stack(..., title = \"Stack\", name = rand_names())  is_stack(x)  get_stack_name(x)  set_stack_name(x, name)  set_stack_title(x, title)  get_stack_title(x)  # S3 method for stack generate_code(x)  serve_stack(stack, id = \"my_stack\")"},{"path":"/reference/new_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacks — new_stack","text":"... ordered set blocks (argument required inherit \"block\") title Stack title name Stack name x object inheriting form \"stack\" stack object inheriting form \"stack\" id Stack ID","code":""},{"path":"/reference/numeric_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric field constructor — new_numeric_field","title":"Numeric field constructor — new_numeric_field","text":"Numeric fields translated numericInput","code":""},{"path":"/reference/numeric_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric field constructor — new_numeric_field","text":"","code":"new_numeric_field(value = numeric(), min = numeric(), max = numeric(), ...)  numeric_field(...)"},{"path":"/reference/numeric_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric field constructor — new_numeric_field","text":"value Default text input value. min Minimum allowed value max Maximum allowed value ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/off_canvas.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap 5 offcanvas — off_canvas","title":"Bootstrap 5 offcanvas — off_canvas","text":"Sidebar like element either top, bottom, right left.","code":""},{"path":"/reference/off_canvas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap 5 offcanvas — off_canvas","text":"","code":"off_canvas(id, title, ..., position = c(\"start\", \"top\", \"bottom\", \"end\"))"},{"path":"/reference/off_canvas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap 5 offcanvas — off_canvas","text":"id Unique id. Must triggered button whose data-bs-target attributes matches id. title Title. ... Body content. position Either start (left), top, bottom end (right).","code":""},{"path":"/reference/off_canvas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap 5 offcanvas — off_canvas","text":"Boolean. TRUE dependency found.","code":""},{"path":"/reference/parser_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Data parser block constructor — new_parser_block","title":"Data parser block constructor — new_parser_block","text":"new_parser_block: block allows create data parsing block. Unless need new data parser, need use directly. csv_block: string given filesbrowser_block upload_block, reads related CSV file returns dataframe. rds_block: string given filesbrowser_block upload_block, reads related rds file returns dataframe. json_block: string given filesbrowser_block upload_block, reads related json file returns dataframe. sas_block: string given filesbrowser_block upload_block, reads related SAS file returns dataframe. csv_block: string given filesbrowser_block upload_block, reads related XPT file returns dataframe.","code":""},{"path":"/reference/parser_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data parser block constructor — new_parser_block","text":"","code":"new_parser_block(data, expr, fields = list(), ..., class = character())  new_csv_block(data, ...)  csv_block(data, ...)  new_rds_block(data, ...)  rds_block(data, ...)  new_json_block(data, ...)  json_block(data, ...)  new_sas_block(data, ...)  sas_block(data, ...)  new_xpt_block(data, ...)  xpt_block(data, ...)"},{"path":"/reference/parser_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data parser block constructor — new_parser_block","text":"data Data coming data reader block like filesbrowser_block upload_block. expr quoted expression (compatible partial substitution implemented base::bquote() intended evaluation context fields) fields list field, entry inheriting \"field\" ... (metadata) attributes class Block subclass","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/range_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Range field constructor — new_range_field","title":"Range field constructor — new_range_field","text":"Range fields translated sliderInput.","code":""},{"path":"/reference/range_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Range field constructor — new_range_field","text":"","code":"new_range_field(value = numeric(), min = numeric(), max = numeric(), ...)  range_field(...)"},{"path":"/reference/range_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Range field constructor — new_range_field","text":"value Default text input value. min, max Slider boundaries (inclusive) ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/remove_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Block remove generic — remove_button","title":"Block remove generic — remove_button","text":"Generic creating block remove button.","code":""},{"path":"/reference/remove_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block remove generic — remove_button","text":"","code":"remove_button(x, ...)  # S3 method for block remove_button(x, id, ...)  # S3 method for stack remove_button(x, id, ...)"},{"path":"/reference/remove_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block remove generic — remove_button","text":"x Object generate UI components ... Generic consistency id Parent ID","code":""},{"path":"/reference/result_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Result block — new_result_block","title":"Result block — new_result_block","text":"result blocks allows one reuse data one stack another one. relevant single stack apps.","code":""},{"path":"/reference/result_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Result block — new_result_block","text":"","code":"new_result_block(...)  result_block(...)"},{"path":"/reference/result_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Result block — new_result_block","text":"... (metadata) attributes","code":""},{"path":"/reference/result_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Result field constructor — new_result_field","title":"Result field constructor — new_result_field","text":"Result field allows reuse result one stack another stack.","code":""},{"path":"/reference/result_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Result field constructor — new_result_field","text":"","code":"new_result_field(value = list(), ...)  result_field(...)"},{"path":"/reference/result_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Result field constructor — new_result_field","text":"value Default text input value. ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/secure.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate expression safely — secure","title":"Evaluate expression safely — secure","text":"tryCatch wrapper.","code":""},{"path":"/reference/secure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate expression safely — secure","text":"","code":"secure(expr)"},{"path":"/reference/secure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate expression safely — secure","text":"expr Expression evaluate.","code":""},{"path":"/reference/secure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate expression safely — secure","text":"Result error message.","code":""},{"path":"/reference/select_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Select block — new_select_block","title":"Select block — new_select_block","text":"block provides access select verb returns dataframe selected columns.","code":""},{"path":"/reference/select_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select block — new_select_block","text":"","code":"new_select_block(data, columns = colnames(data)[1], ...)  select_block(data, ...)"},{"path":"/reference/select_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select block — new_select_block","text":"data Tabular data select columns. columns Column(s) select. ... (metadata) attributes","code":""},{"path":"/reference/select_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Select field constructor — new_select_field","title":"Select field constructor — new_select_field","text":"Select fields translated selectInput","code":""},{"path":"/reference/select_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select field constructor — new_select_field","text":"","code":"new_select_field(   value = character(),   choices = character(),   multiple = FALSE,   ... )  select_field(...)"},{"path":"/reference/select_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select field constructor — new_select_field","text":"value Default text input value. choices Select choices multiple Allow multiple selection ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/server_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Server code generic — server_code","title":"Server code generic — server_code","text":"Generate server code output.","code":""},{"path":"/reference/server_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server code generic — server_code","text":"","code":"server_code(x, state, output)  # S3 method for block server_code(x, state, output)"},{"path":"/reference/server_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server code generic — server_code","text":"x Block. state Block state output Shiny output","code":""},{"path":"/reference/server_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Server output generic — server_output","title":"Server output generic — server_output","text":"Generate block server output. Needed UI side. generally table containing processed block data.","code":""},{"path":"/reference/server_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server output generic — server_output","text":"","code":"server_output(x, result, output)  # S3 method for block server_output(x, result, output)  # S3 method for upload_block server_output(x, result, output)  # S3 method for filesbrowser_block server_output(x, result, output)  # S3 method for plot_block server_output(x, result, output)"},{"path":"/reference/server_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server output generic — server_output","text":"x Block. result Block result output Shiny output","code":""},{"path":"/reference/set_workspace.html","id":null,"dir":"Reference","previous_headings":"","what":"Workspace — set_workspace","title":"Workspace — set_workspace","text":"Stacks live singleton workspace.","code":""},{"path":"/reference/set_workspace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workspace — set_workspace","text":"","code":"set_workspace(   ...,   title = \"\",   settings = NULL,   force = FALSE,   workspace = get_workspace() )  restore_workspace(x, force = FALSE, workspace = get_workspace())  get_workspace()  is_workspace(x)  add_workspace_stack(name, stack, force = FALSE, workspace = get_workspace())  set_workspace_stack(name, stack, force = FALSE, workspace = get_workspace())  rm_workspace_stacks(name, force = FALSE, workspace = get_workspace())  rm_workspace_stack(name, force = FALSE, workspace = get_workspace())  set_workspace_title(title, workspace = get_workspace())  set_workspace_settings(settings, workspace = get_workspace())  list_workspace_stacks(workspace = get_workspace())  get_workspace_stack(name, workspace = get_workspace())  get_workspace_stacks(names = NULL, workspace = get_workspace())  get_workspace_title(workspace = get_workspace())  get_workspace_settings(workspace = get_workspace())  serve_workspace(   ...,   clear = NULL,   id = \"myworkspace\",   workspace = get_workspace() )"},{"path":"/reference/set_workspace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workspace — set_workspace","text":"... Passed set_workspace() title workspace title settings (optional) list settings (string ist parsed JSON) force Force overwrite existing stacks (otherwise may throw warning) workspace workspace environment x (Workspace) object name Stack name stack single stack names Stack names clear Clear current worspace id Workspace ID","code":""},{"path":"/reference/stack_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack header generic — stack_header","title":"Stack header generic — stack_header","text":"Generic creating stack header.","code":""},{"path":"/reference/stack_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack header generic — stack_header","text":"","code":"stack_header(x, ...)  # S3 method for stack stack_header(x, title, ns, ...)"},{"path":"/reference/stack_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack header generic — stack_header","text":"x Object generate UI components ... Generic consistency title Stack title. ns Module namespace","code":""},{"path":"/reference/string_field.html","id":null,"dir":"Reference","previous_headings":"","what":"String field constructor — new_string_field","title":"String field constructor — new_string_field","text":"String fields translated textInput","code":""},{"path":"/reference/string_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String field constructor — new_string_field","text":"","code":"new_string_field(value = character(), ...)  string_field(...)"},{"path":"/reference/string_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String field constructor — new_string_field","text":"value Default text input value. ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/submit_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Submit field constructor — new_submit_field","title":"Submit field constructor — new_submit_field","text":"Submit fields translated actionButton","code":""},{"path":"/reference/submit_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submit field constructor — new_submit_field","text":"","code":"new_submit_field(...)  submit_field(...)"},{"path":"/reference/submit_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submit field constructor — new_submit_field","text":"... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/summarize_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize block — new_summarize_block","title":"Summarize block — new_summarize_block","text":"block provides access summarize verb returns dataframe transformed columns.","code":""},{"path":"/reference/summarize_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize block — new_summarize_block","text":"","code":"new_summarize_block(   data,   func = c(\"mean\", \"se\"),   default_columns = character(),   ... )  summarize_block(data, ...)"},{"path":"/reference/summarize_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize block — new_summarize_block","text":"data Tabular data select columns. func Summarize function apply. default_columns know advance function apply, can also pass predefined selected column summary. Therefore length 0, columns length func. ... (metadata) attributes","code":""},{"path":"/reference/switch_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch field constructor — new_switch_field","title":"Switch field constructor — new_switch_field","text":"Switch fields translated input_switch","code":""},{"path":"/reference/switch_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch field constructor — new_switch_field","text":"","code":"new_switch_field(value = FALSE, ...)  switch_field(...)"},{"path":"/reference/switch_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch field constructor — new_switch_field","text":"value Default text input value. ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/uiCode.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy code generic — uiCode","title":"Copy code generic — uiCode","text":"Generate ui copy block code output code content.","code":""},{"path":"/reference/uiCode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy code generic — uiCode","text":"","code":"uiCode(x, ns)  # S3 method for block uiCode(x, ns)"},{"path":"/reference/uiCode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy code generic — uiCode","text":"x Object generate UI components ns Module namespace","code":""},{"path":"/reference/uiOutputBlock.html","id":null,"dir":"Reference","previous_headings":"","what":"Render block output generic — uiOutputBlock","title":"Render block output generic — uiOutputBlock","text":"Renders block output.","code":""},{"path":"/reference/uiOutputBlock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render block output generic — uiOutputBlock","text":"","code":"uiOutputBlock(x, ns)  # S3 method for block uiOutputBlock(x, ns)  # S3 method for upload_block uiOutputBlock(x, ns)  # S3 method for filesbrowser_block uiOutputBlock(x, ns)  # S3 method for plot_block uiOutputBlock(x, ns)"},{"path":"/reference/uiOutputBlock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render block output generic — uiOutputBlock","text":"x Block. ns Output namespace","code":""},{"path":"/reference/ui_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Block fields generic — ui_fields","title":"Block fields generic — ui_fields","text":"Generic creating fields UI container","code":""},{"path":"/reference/ui_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block fields generic — ui_fields","text":"","code":"ui_fields(x, ...)  # S3 method for block ui_fields(x, ns, inputs_hidden, ...)"},{"path":"/reference/ui_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block fields generic — ui_fields","text":"x Object generate UI components ... Generic consistency ns Module namespace inputs_hidden styling purposes: CSS class apply block collapsed.","code":""},{"path":"/reference/ui_input.html","id":null,"dir":"Reference","previous_headings":"","what":"UI input generic — ui_input","title":"UI input generic — ui_input","text":"given field, generates corresponding shiny input tag. ui_update updates corresponding input server side. input_ids reponsible finding element id.","code":""},{"path":"/reference/ui_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI input generic — ui_input","text":"","code":"ui_input(x, id, name)  # S3 method for string_field ui_input(x, id, name)  # S3 method for select_field ui_input(x, id, name)  # S3 method for switch_field ui_input(x, id, name)  # S3 method for numeric_field ui_input(x, id, name)  # S3 method for submit_field ui_input(x, id, name)  # S3 method for upload_field ui_input(x, id, name)  # S3 method for filesbrowser_field ui_input(x, id, name)  # S3 method for result_field ui_input(x, id, name)  input_ids(x, ...)  # S3 method for block input_ids(x, ...)  # S3 method for field input_ids(x, name, ...)  # S3 method for variable_field ui_input(x, id, name)  # S3 method for range_field ui_input(x, id, name)  # S3 method for hidden_field ui_input(x, id, name)  # S3 method for list_field ui_input(x, id, name)  ui_update(x, session, id, name)  # S3 method for string_field ui_update(x, session, id, name)  # S3 method for select_field ui_update(x, session, id, name)  # S3 method for switch_field ui_update(x, session, id, name)  # S3 method for variable_field ui_update(x, session, id, name)  # S3 method for range_field ui_update(x, session, id, name)  # S3 method for numeric_field ui_update(x, session, id, name)  # S3 method for submit_field ui_update(x, session, id, name)  # S3 method for upload_field ui_update(x, session, id, name)  # S3 method for filesbrowser_field ui_update(x, session, id, name)  # S3 method for hidden_field ui_update(x, session, id, name)  # S3 method for list_field ui_update(x, session, id, name)"},{"path":"/reference/ui_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI input generic — ui_input","text":"x Object generate UI components id UI IDs name Field name. ... Generic consistency session Shiny session","code":""},{"path":"/reference/update_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Update field generic — update_field","title":"Update field generic — update_field","text":"Update field new value. Needed update_fields block. Necessary keep R object sync Shiny interface state (input state).","code":""},{"path":"/reference/update_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update field generic — update_field","text":"","code":"update_field(x, new, env = list())  # S3 method for field update_field(x, new, env = list())"},{"path":"/reference/update_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update field generic — update_field","text":"x object inheriting form \"field\" new Value set env Environment data field values","code":""},{"path":"/reference/update_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update field generic — update_field","text":"modified field.","code":""},{"path":"/reference/update_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Update fields generic — update_fields","title":"Update fields generic — update_fields","text":"block, update fields.","code":""},{"path":"/reference/update_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update fields generic — update_fields","text":"","code":"update_fields(x, ...)  # S3 method for data_block update_fields(x, session, ...)  # S3 method for transform_block update_fields(x, session, data, ...)  # S3 method for plot_block update_fields(x, session, data, ...)"},{"path":"/reference/update_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update fields generic — update_fields","text":"x object inheriting \"block\" ... generic consistency. session Shiny session data Block input data","code":""},{"path":[]},{"path":"/reference/upload_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload block constructor — new_upload_block","title":"Upload block constructor — new_upload_block","text":"block allows upload data user files system. block outputs string containing file path.","code":""},{"path":"/reference/upload_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload block constructor — new_upload_block","text":"","code":"new_upload_block(...)  upload_block(...)"},{"path":"/reference/upload_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload block constructor — new_upload_block","text":"... (metadata) attributes","code":""},{"path":"/reference/upload_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload field constructor — new_upload_field","title":"Upload field constructor — new_upload_field","text":"Upload fields translated fileInput","code":""},{"path":"/reference/upload_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload field constructor — new_upload_field","text":"","code":"new_upload_field(value = character(), ...)  upload_field(...)"},{"path":"/reference/upload_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload field constructor — new_upload_field","text":"value Default text input value. ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/useBlockr.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Blockr Imports blockr dependencies — useBlockr","title":"Use Blockr Imports blockr dependencies — useBlockr","text":"Use Blockr Imports blockr dependencies","code":""},{"path":"/reference/useBlockr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Blockr Imports blockr dependencies — useBlockr","text":"","code":"useBlockr()"},{"path":"/reference/validate_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a entire block — validate_block","title":"Validate a entire block — validate_block","text":"Depending whether inputs invalid.","code":""},{"path":"/reference/validate_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a entire block — validate_block","text":"","code":"validate_block(blk, is_valid, session)"},{"path":"/reference/validate_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a entire block — validate_block","text":"blk Block reactive value. is_valid Block valid status. session Shiny session object.","code":""},{"path":"/reference/validate_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a entire block — validate_block","text":"Side effects.","code":""},{"path":"/reference/validate_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate field generic — validate_field","title":"Validate field generic — validate_field","text":"Checks value field value apply corrections whenever necessary.","code":""},{"path":"/reference/validate_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate field generic — validate_field","text":"","code":"validate_field(x)  # S3 method for string_field validate_field(x)  # S3 method for select_field validate_field(x)  # S3 method for switch_field validate_field(x)  # S3 method for numeric_field validate_field(x)  # S3 method for submit_field validate_field(x)  # S3 method for upload_field validate_field(x)  # S3 method for filesbrowser_field validate_field(x)  # S3 method for variable_field validate_field(x)  # S3 method for range_field validate_field(x)  # S3 method for hidden_field validate_field(x)  # S3 method for list_field validate_field(x)  # S3 method for result_field validate_field(x)  # S3 method for keyvalue_field validate_field(x)"},{"path":"/reference/validate_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate field generic — validate_field","text":"x object inheriting form \"field\"","code":""},{"path":"/reference/validate_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate inputs — validate_inputs","title":"Validate inputs — validate_inputs","text":"Get input value determine valid.","code":""},{"path":"/reference/validate_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate inputs — validate_inputs","text":"","code":"validate_inputs(blk, is_valid, session)"},{"path":"/reference/validate_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate inputs — validate_inputs","text":"blk Block reactive value. is_valid Block valid status. session Shiny session object.","code":""},{"path":"/reference/validate_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate inputs — validate_inputs","text":"Side effects.","code":""},{"path":"/reference/value.html","id":null,"dir":"Reference","previous_headings":"","what":"Get field attribute value — value","title":"Get field attribute value — value","text":"Get field value attribute. function, return result attribute instead.","code":""},{"path":"/reference/value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get field attribute value — value","text":"","code":"value(x, name = \"value\")  value(x, name = \"value\") <- value"},{"path":"/reference/value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get field attribute value — value","text":"x object inheriting form \"field\" name Field component name value Field value","code":""},{"path":"/reference/value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get field attribute value — value","text":"Field value field.","code":""},{"path":"/reference/values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all values from a field — values","title":"Get all values from a field — values","text":"calls value field's names.","code":""},{"path":"/reference/values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all values from a field — values","text":"","code":"values(x, name = names(x))"},{"path":"/reference/values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all values from a field — values","text":"x object inheriting form \"field\" name Field component name","code":""},{"path":"/reference/values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all values from a field — values","text":"list containing values.","code":""},{"path":"/reference/variable_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable field constructor — new_variable_field","title":"Variable field constructor — new_variable_field","text":"Variable field intended conditionally display different field based condition.","code":""},{"path":"/reference/variable_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable field constructor — new_variable_field","text":"","code":"new_variable_field(   value = character(),   field = character(),   components = list(),   ... )  variable_field(...)"},{"path":"/reference/variable_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable field constructor — new_variable_field","text":"value Default text input value. field Field type components Variable list field components ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"/reference/variable_field.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Variable field constructor — new_variable_field","text":"Currently broken. use.","code":""},{"path":"/reference/write_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Logging — write_log","title":"Logging — write_log","text":"Infrastructure logging messages.","code":""},{"path":"/reference/write_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging — write_log","text":"","code":"write_log(..., level = \"info\")  log_fatal(...)  log_error(...)  log_warn(...)  log_info(...)  log_debug(...)  log_trace(...)  as_log_level(level)  cnd_logger(msg, level)  cat_logger(msg, level)"},{"path":"/reference/write_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logging — write_log","text":"... Concatenated paste0(..., \"\\n\") level Logging level (possible values \"fatal\", \"error\", \"warn\", \"info\", \"debug\" \"trace\" msg Message (string)","code":""},{"path":"/news/index.html","id":"blockr-0019000","dir":"Changelog","previous_headings":"","what":"blockr 0.0.1.9000","title":"blockr 0.0.1.9000","text":"single stacks. data block. filter block. Add/remove block stack.","code":""}]
