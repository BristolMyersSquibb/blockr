[{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr-examples.html","id":"blockr-across-industries","dir":"Articles","previous_headings":"","what":"blockr Across Industries","title":"5: Case studies","text":"flexibility blockr makes valuable across various industries. Let’s explore can applied different sectors detailed examples. examples require create new field new_slider_field described corresponding vignette.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr-examples.html","id":"finance-stock-price-forecasting","dir":"Articles","previous_headings":"blockr Across Industries","what":"1. Finance: Stock Price Forecasting","title":"5: Case studies","text":"example, ’ll create pipeline fetches recent stock data using quantmod package, performs time series analysis, forecasts future stock prices using Prophet model. first design stock_data_block, containing field select stock items generate data. prophet_forecast_block modeling part. Stock model demo","code":"# Does not run on shinylive as quantmod/prophet not available library(blockr) library(quantmod) library(prophet)  # Custom block to fetch stock data new_stock_data_block <- function(...) {   # stocks to pick (top 10)   pick_stock <- \\()  c(\"NVDA\", \"TSLA\", \"AAPL\", \"MSFT\", \"AVGO\", \"AMZN\", \"AMD\", \"PLTR\", \"TSM\", \"META\")     new_block(     fields = list(       ticker = new_select_field(pick_stock()[1], pick_stock, multiple = FALSE, title = \"Ticker\")     ),     expr = quote({       data_xts <- getSymbols(.(ticker), src = \"yahoo\", auto.assign = FALSE)       data.frame(Date = index(data_xts), coredata(data_xts)) |>         tail(700) # only considering last 700 days for this example     }),     class = c(\"stock_data_block\", \"data_block\"),     ...   ) }  # Custom block for Prophet forecasting new_prophet_forecast_block <- function(columns = character(), ...) {   all_cols <- function(data) colnames(data)[2:length(colnames(data))]     new_block(     fields = list(       # date_col = new_select_field(columns, all_cols, multiple=FALSE, title=\"Date\"),       value_col = new_select_field(columns, all_cols, multiple = FALSE, title = \"Value\"),       periods = new_slider_field(7, min = 0, max = 365, title = \"Forecast duration\")     ),     expr = quote({       df <- data.frame(         ds = data$Date,         y = data[[.(value_col)]]       )       model <- prophet(df)       future <- make_future_dataframe(model, periods = .(periods))       forecast <- predict(model, future)       plot(model, forecast)     }),     class = c(\"prophet_forecast_block\", \"plot_block\"),     ...   ) }  # Register custom blocks register_block(   new_stock_data_block,   name = \"Stock Data\",   description = \"Fetch stock data\",   category = \"data\",   classes = c(\"stock_data_block\", \"data_block\"),   input = NA_character_,   output = \"data.frame\" ) register_block(   new_prophet_forecast_block,   name = \"Prophet Forecast\",   description = \"Forecast using Prophet\",   category = \"plot\",   classes = c(\"prophet_forecast_block\", \"plot_block\"),   input = \"data.frame\",   output = \"plot\" )  # Create the stack stock_forecast_stack <- new_stack(   new_stock_data_block(),   new_prophet_forecast_block() )  serve_stack(stock_forecast_stack)"},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr-examples.html","id":"ae-forest-plot","dir":"Articles","previous_headings":"blockr Across Industries > 2. Pharmaceutical: Clinical Trial Analysis","what":"2.1 AE Forest Plot","title":"5: Case studies","text":"forest plot visualizes relative risk adverse events two treatment arms clinical trial. case, compares “Xanomeline High Dose” “Xanomeline Low Dose” starting pharmaverseadam adae dataset. may notice, new_forest_plot_block quite complex block. Part code isolated function create_ae_forest_plot main block constructor readable. Toggle code","code":"library(blockr) library(dplyr) library(tidyr) library(forestplot) library(blockr.pharmaverseadam)  # Function to create adverse event forest plot create_ae_forest_plot <- function(data, usubjid_col, arm_col, aedecod_col, n_events) {   data <- data |> filter(.data[[arm_col]] != \"Placebo\")   # Convert column names to strings   usubjid_col <- as.character(substitute(usubjid_col))   arm_col <- as.character(substitute(arm_col))   aedecod_col <- as.character(substitute(aedecod_col))    # Calculate the total number of subjects in each arm   n_subjects <- data |>     select(all_of(c(usubjid_col, arm_col))) |>     distinct() |>     group_by(across(all_of(arm_col))) |>     summarise(n = n(), .groups = \"drop\")    # Calculate AE frequencies and proportions   ae_summary <- data |>     group_by(across(all_of(c(arm_col, aedecod_col)))) |>     summarise(n_events = n_distinct(.data[[usubjid_col]]), .groups = \"drop\") |>     left_join(n_subjects, by = arm_col) |>     mutate(proportion = n_events / n)    # Select top N most frequent AEs across all arms   top_aes <- ae_summary |>     group_by(across(all_of(aedecod_col))) |>     summarise(total_events = sum(n_events), .groups = \"drop\") |>     top_n(n_events, total_events) |>     pull(all_of(aedecod_col))    # Get unique treatment arms   arms <- unique(data[[arm_col]])   if (length(arms) != 2) {     stop(\"This plot requires exactly two treatment arms.\")   }   active_arm <- arms[1]   control_arm <- arms[2]    # Filter for top AEs and calculate relative risk   ae_rr <- ae_summary |>     filter(.data[[aedecod_col]] %in% top_aes) |>     pivot_wider(       id_cols = all_of(aedecod_col),       names_from = all_of(arm_col),       values_from = c(n_events, n, proportion)     ) |>     mutate(       RR = .data[[paste0(\"proportion_\", active_arm)]] / .data[[paste0(\"proportion_\", control_arm)]],       lower_ci = exp(log(RR) - 1.96 * sqrt(         1 / .data[[paste0(\"n_events_\", active_arm)]] +           1 / .data[[paste0(\"n_events_\", control_arm)]] -           1 / .data[[paste0(\"n_\", active_arm)]] -           1 / .data[[paste0(\"n_\", control_arm)]]       )),       upper_ci = exp(log(RR) + 1.96 * sqrt(         1 / .data[[paste0(\"n_events_\", active_arm)]] +           1 / .data[[paste0(\"n_events_\", control_arm)]] -           1 / .data[[paste0(\"n_\", active_arm)]] -           1 / .data[[paste0(\"n_\", control_arm)]]       ))     )    # Prepare data for forest plot   forest_data <- ae_rr |>     mutate(       label = paste0(         .data[[aedecod_col]], \" (\",         .data[[paste0(\"n_events_\", active_arm)]], \"/\", .data[[paste0(\"n_\", active_arm)]], \" vs \",         .data[[paste0(\"n_events_\", control_arm)]], \"/\", .data[[paste0(\"n_\", control_arm)]], \")\"       )     )    # Create forest plot   forestplot(     labeltext = cbind(       forest_data$label,       sprintf(\"%.2f (%.2f-%.2f)\", forest_data$RR, forest_data$lower_ci, forest_data$upper_ci)     ),     mean = forest_data$RR,     lower = forest_data$lower_ci,     upper = forest_data$upper_ci,     align = c(\"l\", \"r\"),     graphwidth = unit(60, \"mm\"),     cex = 0.9,     lineheight = unit(8, \"mm\"),     boxsize = 0.35,     col = fpColors(box = \"royalblue\", line = \"darkblue\", summary = \"royalblue\"),     txt_gp = fpTxtGp(label = gpar(cex = 0.9), ticks = gpar(cex = 0.9), xlab = gpar(cex = 0.9)),     xlab = paste(\"Relative Risk (\", active_arm, \" / \", control_arm, \")\"),     zero = 1,     lwd.zero = 2,     lwd.ci = 2,     xticks = c(0.5, 1, 2, 4),     grid = TRUE,     title = paste(\"Relative Risk of Adverse Events (\", active_arm, \" vs \", control_arm, \")\")   ) }  new_forest_plot_block <- function(...) {   new_block(     fields = list(       usubjid_col = new_select_field(         \"USUBJID\",         function(data) colnames(data),         multiple = FALSE,         title = \"Subject ID Column\"       ),       arm_col = new_select_field(         \"ACTARM\",         function(data) colnames(data),         multiple = FALSE,         title = \"Treatment Arm Column\"       ),       aedecod_col = new_select_field(         \"AEDECOD\",         function(data) colnames(data),         multiple = FALSE,         title = \"AE Term Column\"       ),       n_events = new_numeric_field(         10,         min = 5, max = 20, step = 1,         title = \"Number of Top AEs to Display\"       )     ),     expr = substitute({       my_fun(data, .(usubjid_col), .(arm_col), .(aedecod_col), .(n_events))     }, list(my_fun = create_ae_forest_plot)),     class = c(\"adverse_event_plot_block\", \"plot_block\"),     ...   ) }  # Register the custom block register_block(   new_forest_plot_block,   name = \"Adverse Event Forest Plot\",   description = \"Create a forest plot of adverse events comparing two treatment arms\",   classes = c(\"adverse_event_plot_block\", \"plot_block\"),   input = \"data.frame\",   output = \"plot\" )  # Create the stack clinical_trial_stack <- new_stack(   new_adam_block(selected = \"adae\"),   # filter_in_block(),   new_forest_plot_block() )  serve_stack(clinical_trial_stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr-examples.html","id":"demographics-table","dir":"Articles","previous_headings":"blockr Across Industries > 2. Pharmaceutical: Clinical Trial Analysis","what":"2.2 Demographics Table","title":"5: Case studies","text":"demographics table taken {cardinal} package FDA Safety Tables Figures demonstrates gt rtables outputs starting pharmaverseadam adsl dataset. side note, block requires extra helpers work properly can find {blockr.cardinal} package. Cardinal demo","code":"library(shiny) library(blockr) library(cardinal) library(blockr.pharmaverseadam)  new_cardinal02_block <- function(...) {   all_cols <- function(data) colnames(data)    fields <- list(     columns = new_select_field(       c(\"SEX\", \"AGE\", \"AGEGR1\", \"RACE\", \"ETHNIC\", \"COUNTRY\"),       all_cols,       multiple = TRUE,       title = \"Variables\"     )   )    expr <- quote({     data <- droplevels(data)      rtables <- cardinal::make_table_02(       df = data,       vars = .(columns)     )      gt <- cardinal::make_table_02_gtsum(       df = data,       vars = .(columns)     )      list(       rtables = rtables,       gt = gt     )   })    new_block(     expr = expr,     fields = fields,     ...,     class = c(\"cardinal02_block\", \"rtables_block\", \"submit_block\")   ) }  register_block(   new_cardinal02_block,   \"Cardinal 02\",   \"A Cardinal 02 table\",   category = \"table\",   input = \"data.frame\",   output = \"list\",   classes = c(\"cardinal02_block\", \"rtables_block\", \"submit_block\") )   # Create the stack rtables_stack <- new_stack(   new_adam_block(selected = \"adsl\"),   new_cardinal02_block() )  serve_stack(rtables_stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr-examples.html","id":"environmental-science-air-quality-analysis-and-prediction","dir":"Articles","previous_headings":"blockr Across Industries","what":"3. Environmental Science: Air Quality Analysis and Prediction","title":"5: Case studies","text":"example demonstrates pipeline analyzing air quality data predicting future pollution levels using actual data openair package. pipeline imports actual air quality data openair package forecasts future pollution levels using ARIMA model.","code":"library(blockr) library(openair) library(forecast)  # Custom block for air quality data import new_air_quality_block <- function(...) {   new_block(     fields = list(       site = new_select_field(         \"kc1\",         \\() openair::importMeta()$code,         multiple = FALSE,         title = \"Monitoring Site\"       ),       start_year = new_numeric_field(         2020,         min = 1990,         max = as.numeric(format(Sys.Date(), \"%Y\")),         step = 1,         title = \"Start Year\"       ),       end_year = new_numeric_field(         as.numeric(format(Sys.Date(), \"%Y\")),         min = 1990,         max = as.numeric(format(Sys.Date(), \"%Y\")),         step = 1,         title = \"End Year\"       )     ),     expr = quote({       importAURN(site = .(site), year = .(start_year):.(end_year)) |> tail(700)     }),     class = c(\"air_quality_block\", \"data_block\"),     ...   ) }   # Custom block for pollution forecasting new_pollution_forecast_block <- function(columns = character(), ...) {   all_cols <- function(data) setdiff(colnames(data), c(\"date\", \"site\", \"source\"))    new_block(     fields = list(       pollutant = new_select_field(columns, all_cols, multiple = FALSE, title = \"Pollutant\"),       horizon = new_slider_field(         30,         min = 1,         max = 365,         step = 1,         title = \"Forecast Horizon (days)\"       )     ),     expr = quote({       ts_data <- ts(na.omit(data[[.(pollutant)]]), frequency = 365)       model <- auto.arima(ts_data)       forecast_result <- forecast(model, h = .(horizon))       plot(forecast_result, main = paste(\"Forecast of\", .(pollutant), \"levels\"))     }),     class = c(\"pollution_forecast_block\", \"plot_block\"),     ...   ) }  # Register custom blocks register_block(   new_air_quality_block,   name = \"Air Quality Data\",   description = \"Import air quality data\",   category = \"data\",   classes = c(\"air_quality_block\", \"data_block\"),   input = NA_character_,   output = \"data.frame\" )  register_block(   new_pollution_forecast_block,   name = \"Pollution Forecast\",   description = \"Forecast pollution levels\",   category = \"plot\",   classes = c(\"pollution_forecast_block\", \"plot_block\"),   input = \"data.frame\",   output = \"plot\" )  # Create the stack air_quality_stack <- new_stack(   new_air_quality_block(),   new_pollution_forecast_block(columns = \"no2\") )  serve_stack(air_quality_stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr-examples.html","id":"marketing-causal-impact-analysis-of-marketing-interventions","dir":"Articles","previous_headings":"blockr Across Industries","what":"4. Marketing: Causal Impact Analysis of Marketing Interventions","title":"5: Case studies","text":"example demonstrates use CausalImpact analyze effect marketing interventions sales data. pipeline generates dummy marketing data intervention, uses CausalImpact analyze effect intervention sales. requires define new date field shown . Marketing demo","code":"library(shiny) new_date_field <- function(value = Sys.Date(), min = NULL, max = NULL, ...) {   blockr::new_field(     value = value,     min = min,     max = max,     ...,     class = \"date_field\"   ) }  date_field <- function(...) {   validate_field(new_date_field(...)) }  #' @method ui_input date_field #' @export ui_input.date_field <- function(x, id, name) {   shiny::dateInput(     blockr::input_ids(x, id),     name,     value = blockr::value(x, \"value\"),     min = blockr::value(x, \"min\"),     max = blockr::value(x, \"max\")   ) }  #' @method validate_field date_field #' @export validate_field.date_field <- function(x, ...) {   x }  #' @method ui_update date_field #' @export ui_update.date_field <- function(x, session, id, name) {   updateDateInput(     session,     blockr::input_ids(x, id),     blockr::get_field_name(x, name),     value = blockr::value(x),     min = blockr::value(x, \"min\"),     max = blockr::value(x, \"max\")   ) } library(blockr) library(CausalImpact) library(dplyr)  # Custom block to load and prepare marketing data new_marketing_data_block <- function(...) {   new_block(     fields = list(       start_date = date_field(         Sys.Date() - 365,         min = Sys.Date() - 730,         max = Sys.Date() - 1,         label = \"Start Date\"       ),       intervention_date = date_field(         Sys.Date() - 180,         min = Sys.Date() - 729,         max = Sys.Date(),         label = \"Intervention Date\"       ),       end_date = date_field(         Sys.Date(),         min = Sys.Date() - 364,         max = Sys.Date(),         label = \"End Date\"       )     ),     expr = quote({       # Generate dummy data for demonstration       dates <- seq(as.Date(.(start_date)), as.Date(.(end_date)), by = \"day\")       sales <- cumsum(rnorm(length(dates), mean = 100, sd = 10))       ad_spend <- cumsum(rnorm(length(dates), mean = 50, sd = 5))        # Add intervention effect       intervention_index <- which(dates == as.Date(.(intervention_date)))       sales[intervention_index:length(sales)] <- sales[intervention_index:length(sales)] * 1.2        data.frame(         date = dates,         sales = sales,         ad_spend = ad_spend       )     }),     class = c(\"marketing_data_block\", \"data_block\"),     ...   ) }  # Custom block for CausalImpact analysis new_causal_impact_block <- function(columns = character(), ...) {   all_cols <- function(data) colnames(data)[2:length(colnames(data))]    new_block(     fields = list(       response_var = new_select_field(         columns,         all_cols,         multiple = FALSE,         title = \"Response Variable\"       ),       covariate_var = new_select_field(         columns,         all_cols,         multiple = FALSE,         title = \"Covariate Variable\"       ),       pre_period_end = date_field(         Sys.Date() - 181,         min = Sys.Date() - 729,         max = Sys.Date() - 1,         label = \"Pre-Period End Date\"       ),       post_period_start = date_field(         Sys.Date() - 180,         min = Sys.Date() - 728,         max = Sys.Date(),         label = \"Post-Period Start Date\"       )     ),     expr = quote({       data <- data.frame(         date = data$date,         y = data[[.(response_var)]],         x = data[[.(covariate_var)]]       )       pre_period <- c(min(as.Date(data$date)), as.Date(.(pre_period_end)))       post_period <- c(as.Date(.(post_period_start)), max(as.Date(data$date)))        impact <- CausalImpact(data, pre_period, post_period)       plot(impact)     }),     class = c(\"causal_impact_block\", \"plot_block\"),     ...   ) }  # Register custom blocks register_block(   new_marketing_data_block,   name = \"Marketing Data\",   description = \"Load and prepare marketing data\",   category = \"data\",   classes = c(\"marketing_data_block\", \"data_block\"),   input = NA_character_,   output = \"data.frame\" ) register_block(   new_causal_impact_block,   name = \"Causal Impact Analysis\",   description = \"Perform Causal Impact analysis on marketing data\",   category = \"plot\",   classes = c(\"causal_impact_block\", \"plot_block\"),   input = \"data.frame\",   output = \"plot\" )  # Create the stack marketing_impact_stack <- new_stack(   new_marketing_data_block(),   new_causal_impact_block() )  serve_stack(marketing_impact_stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr-examples.html","id":"dynamical-systems","dir":"Articles","previous_headings":"blockr Across Industries","what":"5. Dynamical systems","title":"5: Case studies","text":"example, implemented Lorenz attractor solve {pracma} R package (technically, reason using {pracma} deSolve diffeqr {pracma} available shinylive required embeded demo). Toggle code","code":"library(blockr) library(pracma) library(blockr.ggplot2)  new_ode_block <- function(...) {    lorenz <- function(t, y, parms) {     c(       X = parms[1] * y[1] + y[2] * y[3],       Y = parms[2] * (y[2] - y[3]),       Z = -y[1] * y[2] + parms[3] * y[2] - y[3]     )   }    fields <- list(     a = new_numeric_field(-8 / 3, -10, 20),     b = new_numeric_field(-10, -50, 100),     c = new_numeric_field(28, 1, 100)   )    new_block(     fields = fields,     expr = substitute(       as.data.frame(         ode45(           fun,           y0 = c(X = 1, Y = 1, Z = 1),           t0 = 0,           tfinal = 100,           parms = c(.(a), .(b), .(c))         )       ),       list(fun = lorenz)     ),     ...,     class = c(\"ode_block\", \"data_block\")   ) }  stack <- new_stack(   new_ode_block,   new_ggplot_block(     func = c(\"x\", \"y\"),     default_columns = c(\"y.1\", \"y.2\")   ),   new_geompoint_block ) serve_stack(stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr.html","id":"get-started","dir":"Articles","previous_headings":"","what":"Get started","title":"blockr","text":"blockr provides plug play blocks can used import, transform visualize data. guide provides entry point end users without extensive coding skills, well developers.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr.html","id":"blockr-for-non-coders","dir":"Articles","previous_headings":"Get started","what":"{blockr} for non coders","title":"blockr","text":"case, likely just want get started create first data pipeline.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr.html","id":"the-user-interface","dir":"Articles","previous_headings":"Get started > {blockr} for non coders","what":"The user interface","title":"blockr","text":"blockr interface looks. designed like cooking recipie, blocks correspond different steps. Within block inputs allow change parameters. instance, import data, may want select given dataset specify file computer server. figure @ref(fig:blockr-ui), airquality dataset imported. top center block, can see information number rows columns. , filter block added target Ozone column. Notice validation message value missing. submit button can’t clicked long input empty, prevents triggering errors downstream blocks. block can collapsed/uncollapsed removed corresponding buttons located top right corner. can see, group related blocks inside common container, stack, can also collapse removed. User Interface Overview","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr.html","id":"starting-from-scratch","dir":"Articles","previous_headings":"Get started > {blockr} for non coders","what":"Starting from scratch","title":"blockr","text":"start scratch, actually blocks interface add one one. add new block, can click + icon stack top right corner. opens sidebar left side, possible search blocks. make things easier, suggested blocks compatible current state pipeline. instance, stack empty, entry point blocks suggested, can import data. , clicking block, suggestion list changes can, instance, filter data select subset columns, .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr.html","id":"toward-a-dashboard","dir":"Articles","previous_headings":"Get started > {blockr} for non coders","what":"Toward a dashboard","title":"blockr","text":"aim creating ambitious pipeline? case, don’t need one cooking recipie multiple, can organise dinner party. slightly complex application, can add multiple stacks connect together. following step connect 2 stacks together: Click “Add stack”. Add new dataset block default BOD dataset. Add filter block. Target Time column values 1 2, click “submit”. get 2 rows. Click “Add stack”. Add new result block second stack. see result first stack. , can build analysis step step modular way.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr.html","id":"blockr-for-developers","dir":"Articles","previous_headings":"Get started","what":"{blockr} for developers","title":"blockr","text":"following section, describe building blocks behind blockr can start creating blocks.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr.html","id":"introduction","dir":"Articles","previous_headings":"Get started > {blockr} for developers","what":"Introduction","title":"blockr","text":"blockr aims abstracting logic behind common data pipeline tasks blocks, without requiring programming background. Besides, blockr exposes multiple tools advanced developers can easily extend . assume stack succession dependent blocks. designed 3 kinds blocks: data block: entry level block determine input data. transform block: materialize dplyr operations selected data. output (plot now) block: consumes transformed data produce visualizations. stack always starts data block may end either transform blocks output block. means , moment, can one output block per stack. hoods, blocks composed fields. latter translated shiny inputs used convey interactivity within block. can see diagram, fields combined compute expression, eventually leads block result evaluation. data block, data input. instance, assume filter dplyr expression: operation can translated data |> filter(<COLNAME> <FILTER_FUNC> <FILTER_VALUE>, ...), <COLNAME>, <FILTER_FUNC> <FILTER_VALUE> fields, give end user ability change expression. Note fields may dependencies, <COLNAME> controling number filters apply. Besides, moment, implementation filter block exposes additive operations, meaning result corresponds cond1 && cond2 && ....","code":"data |> filter(col1 == \"test\")"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr.html","id":"create-a-stack","dir":"Articles","previous_headings":"Get started > {blockr} for developers","what":"Create a stack","title":"blockr","text":"create stack, call new_stack() feed required blocks. simple stack providing dataset selector filter operation. serve_stack() simple wrapper run corresponding shiny app. Note serve_stack(), don’t need worry specifying modules IDs, automatically handled blockr. blocks can instantiated either calling constructor name passed stack: Alternatively, possible create block specific parameter values, shown : default, last stack block visible, others collapsed. preview block can set options(\"BLOCKR_DEV\" = TRUE).","code":"stack <- new_stack(new_dataset_block) library(blockr) library(blockr.data) library(palmerpenguins)  stack <- new_stack(   block1 = new_dataset_block(selected = \"penguins\", package = \"palmerpenguins\"),   block2 = new_filter_block(columns = \"species\", values = \"Adelie\") ) serve_stack(stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr.html","id":"example-with-modules","dir":"Articles","previous_headings":"Get started > {blockr} for developers","what":"Example with modules","title":"blockr","text":"might useful consider embedding blockr application. stack can nested within modules.","code":"library(shiny) library(blockr)  stack <- new_stack(   new_dataset_block,   new_filter_block,   new_select_block )  block_ui <- function(id) {   ns <- NS(id)   generate_ui(stack, id = ns(\"b\")) }  block_server <- function(id) {   moduleServer(     id,     function(input, output, session){       ns <- session$ns       generate_server(stack, id = \"b\")     }   ) }  ui <- function(req) {   fluidPage(     theme = bslib::bs_theme(5L),     div(       class = \"row\",       block_ui(\"x\")     )   ) } server <- function(input, output, session) {   block_server(\"x\") }  shinyApp(ui, server)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/blockr.html","id":"connect-stacks-the-workspace","dir":"Articles","previous_headings":"Get started > {blockr} for developers","what":"Connect stacks: the workspace","title":"blockr","text":"workspace allows create complex analysis connecting stacks together get dashboard. know can read following article.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/data-blocks.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"1. Data blocks","text":"Data blocks starting point stack required subsequent transform plot blocks.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/data-blocks.html","id":"package-based-data-block","dir":"Articles","previous_headings":"Introduction","what":"Package based data block","title":"1. Data blocks","text":"add data set, use function new_dataset_block(), passing package name package arg contains number datasets: new_dataset_block() function defaults using base R datasets package, can supply valid package containing one multiple data sets. , use {blockr.data} package select \"lab\" data set:","code":"new_dataset_block <- function(   selected = character(),   package = \"datasets\",   ...,    ) {   # code   } library(blockr) custom_data_block <- function(...) {   new_dataset_block(     selected = \"lab\",     package = \"blockr.data\",     ...   ) }  stack <- new_stack(   custom_data_block,   new_select_block ) serve_stack(stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/data-blocks.html","id":"reading-data-from-files","dir":"Articles","previous_headings":"Introduction","what":"Reading data from files","title":"1. Data blocks","text":"addition loading data package, blockr also contains block upload data file. blockr exposes two extra data blocks combined one four following data parser blocks: new_xpt_block, reads xpt files (sas7bdat files). new_rds_block, reads rds files. new_json_block, reads json files. new_csv_block, reads csv files.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/data-blocks.html","id":"upload-data","dir":"Articles","previous_headings":"Introduction > Reading data from files","what":"Upload data","title":"1. Data blocks","text":"want load data location computer, new_upload_block() need. Since new_upload_block() temporarily moves data custom location, security reasons, might always possible.","code":"library(blockr)  stack <- new_stack(   new_upload_block,   new_csv_block,   new_select_block ) serve_stack(stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/data-blocks.html","id":"files-browser-block","dir":"Articles","previous_headings":"Introduction > Reading data from files","what":"Files browser block","title":"1. Data blocks","text":"new_filesbrowser_block() can read data server file system. means data available server, won’t see anything. accessible locations can customized volumes parameter like : following demonstration, dummy dataset uploaded webR file system can play block. , can also upload data thanks corresponding shinylive feature (upload button). Note later release, plan merge filesbrowser_block() upload_block() single variable block.","code":"custom_filesbrowser_block <- function(...) {   new_filesbrowser_block(     file_path = character(),     volumes = c(vol1 = \"<PATH1>\", vol2 = \"<PATH2>\"),     ...   ) } ## file: app.R library(blockr)  stack <- new_stack(   new_filesbrowser_block,   new_csv_block,   new_select_block ) serve_stack(stack)  ## file: penguins.csv"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/data-blocks.html","id":"reading-data-from-another-stack","dir":"Articles","previous_headings":"Introduction","what":"Reading data from another stack","title":"1. Data blocks","text":"new_result_block() allows read data another stack. code, first stack contains new_dataset_block() can select columns new_select_block(). second stack, can reuse smaller dataset. dynamically add third stack, can also select third stack’s output input second stack (appears result block select input).","code":"library(blockr) library(blockr.data)  serve_workspace(   stack1 = new_stack(     new_dataset_block(\"lab\", \"blockr.data\"),     new_select_block(c(\"STUDYID\", \"USUBJID\"))   ),   stack2 = new_stack(new_result_block),   stack3 = new_stack(new_dataset_block(\"ae\", \"blockr.data\")),   title = \"My workspace\" )"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/internals.html","id":"blockr-structure","dir":"Articles","previous_headings":"","what":"{blockr} structure","title":"6: Internals","text":"hood, blockr utilises S3 creates classes apply relevant methods whenever necessary. describe general idea .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/internals.html","id":"workspace","dir":"Articles","previous_headings":"{blockr} structure","what":"Workspace","title":"6: Internals","text":"TBD","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/internals.html","id":"stack","dir":"Articles","previous_headings":"{blockr} structure","what":"Stack","title":"6: Internals","text":"stack list blocks. stack able dynamically add new blocks add_block().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/internals.html","id":"modify-a-stack","dir":"Articles","previous_headings":"{blockr} structure > Stack","what":"Modify a stack","title":"6: Internals","text":"add block stack, can leverage add_block(): specify position (last parameter), can add block right given index. instance, command first inserts select block data block. , filter block included right data block. Note can’t add block data block plot block. later version, may add multiple plots per stack.","code":"stack <- new_stack(dataset_block) |>   add_block(select_block) |>   add_block(filter_block, 1)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/internals.html","id":"moving-blocks","dir":"Articles","previous_headings":"{blockr} structure > Stack","what":"Moving blocks","title":"6: Internals","text":"TBD","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/internals.html","id":"blocks","dir":"Articles","previous_headings":"{blockr} structure","what":"Blocks","title":"6: Internals","text":"block structure carrying various information: class: blockr leverages S3, class important apply right methods. instance, data block, tranform output blocks different methods (generate_server.data_block, …, respectively). expr: expression evaluated produce block result. result: block output can passed another block. block composed fields gathered list, translated Shiny inputs. fields necessary elements reconstruct block expression subsequently produce result whenever gets evaluated.","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/internals.html","id":"simple-fields","dir":"Articles","previous_headings":"{blockr} structure > Fields","what":"Simple fields","title":"6: Internals","text":"field structure type class. validate_field generic ensures field revelant values. instance, string field, ultimately becomes shiny text input, method validate_field.string_field responsible checking value character string modifies .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/internals.html","id":"more-complex-fields","dir":"Articles","previous_headings":"{blockr} structure > Fields","what":"More complex fields","title":"6: Internals","text":"TBD","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/internals.html","id":"validation-and-evaluation","dir":"Articles","previous_headings":"","what":"Validation and evaluation","title":"6: Internals","text":"’s currently {blockr} validate blocks fields. block validated, meaning field compose valid values according input data. everything valid, block expression evaluated result computed passed next block. error catched R forwarded JavaScript users notified went wrong .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/internals.html","id":"adding-new-fields","dir":"Articles","previous_headings":"","what":"Adding new fields","title":"6: Internals","text":"Fields translated shiny inputs. instance, select_field surprinsingly yields shiny selectInput. quite easy add new field: ./R/field.R, create new new_*_field *_field functions, * field name. ./R/field.R, add specific validation method validate_field.*_field. ./R/ui.R, add ui_input.*_field ui_update.*_field create corresponding HTML element Shiny.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/internals.html","id":"create-a-new-block","dir":"Articles","previous_headings":"","what":"Create a new block","title":"6: Internals","text":"may find situation set existing blocks fully meet needs. exposed helpers can quickly get started creating new block. can call create_block choosing transform plot block. creates new block file R/<name>-block.R. block specific output, may need tweak ./R/server.R: Add server_output.*_block method, * new block name. Add specific generate_server.*_block. include new fields, refer previous section.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/new-field.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"4. Case study: create a new field","text":"create field, first need design constructor. case, call new_slider_field. Since fields mirroring shiny inputs, can naturally provide corresponding input parameters value, minimum, maximum step. pass blockr::new_field() give custom class slider_field. UI side, fairly straightforward call shiny::sliderInput parameters given constructor. next step consists validating field ensure provided values correct. instance, want make sure passed elements numbers. done within validate_field.slider_field method. extract field element values blockr::value(x, \"element\") use suitable validate function, validate_number(). Note nothing provided, validation falls back validate_field.field(), nothing. Finally, want make sure can update field ui_update.slider_field() method. needed whenever another field update slider field, possible dependency 2 fields. example, currently happens filter block selected column field updates value field (field type changes depending column type).","code":"new_slider_field <- function(     value = numeric(),     min = numeric(),     max = numeric(),     step = numeric(),     ...) {   blockr::new_field(     value = value,     min = min,     max = max,     step = step,     ...,     class = \"slider_field\"   ) } ui_input.slider_field <- function(x, id, name) {   shiny::sliderInput(     blockr::input_ids(x, id),     name,     value = blockr::value(x, \"value\"),     min = blockr::value(x, \"min\"),     max = blockr::value(x, \"max\"),     step = blockr::value(x, \"step\")   ) } validate_field.slider_field <- function(x) {   val <- value(x)   min <- value(x, \"min\")   max <- value(x, \"max\")   step <- value(x, \"step\")    validate_number(val)    if (length(min)) {     validate_number(min, \"min\")   }    if (length(max)) {     validate_number(max, \"max\")   }    if (length(step)) {     validate_number(step, \"step\")   }    NextMethod() } ui_update.slider_field <- function(x, session, id, name) {   updateSliderInput(     session,     blockr::input_ids(x, id),     blockr::get_field_name(x, name),     blockr::value(x),     blockr::value(x, \"min\"),     blockr::value(x, \"max\"),     blockr::value(x, \"step\")   ) }"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/new-field.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"4. Case study: create a new field","text":"can test newly created field custom block. Toggle code","code":"library(blockr)  new_slider_field <- function(     value = numeric(),     min = numeric(),     max = numeric(),     step = numeric(),     ...) {   blockr::new_field(     value = value,     min = min,     max = max,     step = step,     ...,     class = \"slider_field\"   ) }  ui_input.slider_field <- function(x, id, name) {   shiny::sliderInput(     blockr::input_ids(x, id),     name,     value = blockr::value(x, \"value\"),     min = blockr::value(x, \"min\"),     max = blockr::value(x, \"max\"),     step = blockr::value(x, \"step\")   ) }  validate_field.slider_field <- function(x) {   val <- value(x)   min <- value(x, \"min\")   max <- value(x, \"max\")   step <- value(x, \"step\")    validate_number(val)    if (length(min)) {     validate_number(min, \"min\")   }    if (length(max)) {     validate_number(max, \"max\")   }    if (length(step)) {     validate_number(step, \"step\")   }    NextMethod() }  ui_update.slider_field <- function(x, session, id, name) {   updateSliderInput(     session,     blockr::input_ids(x, id),     name,     blockr::value(x),     blockr::value(x, \"min\"),     blockr::value(x, \"max\"),     blockr::value(x, \"step\")   ) }  registerS3method(\"ui_input\", \"slider_field\", ui_input.slider_field) registerS3method(\"ui_update\", \"slider_field\", ui_update.slider_field)  new_slice_block <- function(from = 0, ...) {    n_rows <- \\(data) nrow(data)    fields <- list(     rows = new_slider_field(       value = from,       min = 0,       max = n_rows,       step = 1,       title = \"Select rows\"     )   )    new_block(     fields = fields,     expr = quote(dplyr::slice(seq_len(.(rows)))),     name = \"Slider slice block\",     ...,     class = c(\"slice_block\", \"transform_block\")   ) }  serve_stack(   new_stack(     new_dataset_block(\"iris\"),     new_slice_block(5)   ) )"},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/plot-block.html","id":"anatomy-of-a-ggplot2-plot","dir":"Articles","previous_headings":"Introduction","what":"Anatomy of a {ggplot2} plot","title":"3. Case study: create a plot block","text":"ggplot2, plots built layer layer. starts ggplot() initialises ggplot object passing optional data mappings. , add geoms, like geom_point(). Geoms also accept custom mappings (overwrite mappings passed first ggplot() call), data, well parameters. result, many ways build ggplot: tutorial, go first option.","code":"# 1 ggplot(data = <DATA>, mapping = <MAPPING>) +   geom_point() # 2 ggplot(data = <DATA>) +   geom_point(mapping = <MAPPING>) +   geom_point(mapping = <MAPPING>)  # 3 ggplot() +   geom_point(data = <DATA>, mapping = <MAPPING>) +   geom_point(data = <DATA>, mapping = <MAPPING>)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/plot-block.html","id":"to-do-list","dir":"Articles","previous_headings":"Introduction","what":"To do list","title":"3. Case study: create a plot block","text":"need create? seems obvious add new ggplot_block() geom constructors. Shiny side, handle plot output element. Remember server_output() generic defined blockr server.R script. supports tables server_output.block() plots server_output.plot_block(). Therefore, don’t need create another S3 method make sure new plot block inherits plot_block class dispatch correct method. work block side since ’ll generate plot layer layer, layer block. writing vignette, blockr support layer layer plots. new concept required expose new way combining plot expressions generate entire stack code. previous infrastructure, : However, handling ggplot2 grammar requires able combine + : process described following, highlight flexibility provided blockr.","code":"data %>% block_1 %>% block_2 data %>% plot_block + layer_block"},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/plot-block.html","id":"new-evaluate_block-method","dir":"Articles","previous_headings":"Introduction > New block helpers","what":"New evaluate_block() method","title":"3. Case study: create a plot block","text":"define new way pass data block layer, evaluate_block.plot_layer_block() method. consequence, block layer must plot_layer_block class: Compared evaluate_block.transform_block(), simply replaced %>% +. Nothing ! side note, develop method test script, register test :","code":"evaluate_block.plot_layer_block <- function(x, data, ...) {   stopifnot(...length() == 0L, inherits(data, \"ggplot\"))   eval(     substitute(data + expr, list(expr = generate_code(x))),     list(data = data)   ) } .S3method(\"<GENERIC>\", \"<CLASS>\", <METHOD>)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/plot-block.html","id":"generate-a-valid-stack-code","dir":"Articles","previous_headings":"Introduction > New block helpers","what":"Generate a valid stack code","title":"3. Case study: create a plot block","text":"adding layer layer plot blocks, generate_code.stack() : method leverages Reduce() applies binary function combine elements vector (left right default). instance, sum 3 first integers : generate_code.stack() successively combines block expressions given lapply(x, generate_code). 3 blocks stack: binary_substitute called twice: combine x <dataset_block_EXPR> (data block expression) y <filter_block_EXPR>, give <dataset_block_EXPR> %>% <filter_block_EXPR>. combine previous result, namely x, equal <dataset_block_EXPR> %>% <filter_block_EXPR> y equal <select_block_EXPR>. ultimately yields: <dataset_block_EXPR> %>% <filter_block_EXPR> %>% <select_block_EXPR> substitute() ensures don’t evaluate generated expression replace x y respective values. Can spot current point? combine plot layer expressions linked + setup? order overcome limitation, introduced block_combiner(), new generic aims linking multiple block expressions depending class. hood, check class right block determine expression link (S3 dispatch occurs second block), %>% + (maybe future). Another important modification bring generate_code.stack(). logic, Reduce() consumes block expressions, thereby preventing us able dispatch. pass vector blocks instead, get: empty stacks, returned code arbitrary. stacks one block, don’t need Reduce() call generate_code() corresponding block. create new internal function, aggregate_code, subsequently calling block_combiner(). still one last issue solve. Since now pass blocks, find way let block_combiner() evaluate block expression. apply generate_code() within substitute() call can inject block expression block . eventually leads us : Importantly, plot constructor like ggplot() plot_block class link %>% (transform blocks).","code":"generate_code.stack <- function(x) {    binary_substitute <- function(x, y) {     substitute(x %>% y, list(x = x, y = y))   }    Reduce(binary_substitute, lapply(x, generate_code)) } Reduce(`+`, 1:3) my_stack <- new_stack(new_dataset_block, new_filter_block, new_select_block) block_combiner <- function(left, right, ...) UseMethod(\"block_combiner\", right) generate_code.stack <- function(x) {   if (length(x) == 0) return(quote(identity()))    # Handles monoblock stacks   if (length(x) > 1) {     aggregate_code <- function(x, y) {       block_combiner(x, y)     }     Reduce(aggregate_code, lapply(x, \\(b) b))   } else {     generate_code(x[[1]])   } } block_combiner.transform_block <- function(left, right, ...) {   substitute(     left %>% right,     list(left = generate_code(left), right = generate_code(right))   ) }  block_combiner.plot_block <- block_combiner.transform_block  block_combiner.plot_layer_block <- function(left, right, ...) {   substitute(     left + right,     list(left = generate_code(left), right = generate_code(right))   ) }"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/plot-block.html","id":"create-the-ggplot-block","dir":"Articles","previous_headings":"Introduction","what":"Create the ggplot block","title":"3. Case study: create a plot block","text":"create new block, call new_block() constructor. expects: fields: list field, translated shiny inputs. expr: expression returned block, necessary produce output export code. name: name (randomly choosen, don’t need worry ). class: class dispatch relevant S3 methods. layout: optional layout (default default_layout_fields()). block c(\"ggplot_block\", \"plot_block\") classes, fields pass mappings leave layout default choice. Note mapping field depends provided data. stay simple, assume handle x y aesthetics. finally end new_ggplot_block constructor. next step create mappings fields two new_select_field(). fields converted shiny inputs, specifically selectInput(). set field choices depend data, define data_cols helper: modify new_ggplot_block : Passing type = \"name\" allows inject functions inside select field choices. useful dynamically update choices whenever data change. Producing expression, certainly “technical” part, involves bit metaprogramming. expression must evaluated block, ’s wrapped quote(). blockr able generate expression generate_code() evaluate evaluate_block(). ggplot expression can written : expression, may notice .(), actually required generate_code(). hoods, needed bquote() evaluates arguments wrapped .() variables environment. makes easier use substitute(), since explicitly mark want evaluate. combined together, eventually yields: can, see code base reasonable terms complexity.","code":"new_ggplot_block <- function(...) {   new_block(     fields = list(       # TO DO     ),     expr = quote(),     class = c(\"ggplot_block\", \"plot_block\"),     ...   ) } data_cols <- function(data) colnames(data) new_ggplot_block <- function(col_x = character(), col_y = character(), ...) {    data_cols <- function(data) colnames(data)    new_block(     fields = list(       x = new_select_field(col_x, data_cols, type = \"name\"),       y = new_select_field(col_y, data_cols, type = \"name\")     ),     expr = quote(),     class = c(\"ggplot_block\", \"plot_block\"),     ...   ) } ggplot(mapping = aes(x = .(x), y = .(y))) new_ggplot_block <- function(col_x = character(), col_y = character(), ...) {    data_cols <- function(data) colnames(data)    new_block(     fields = list(       x = new_select_field(col_x, data_cols, type = \"name\"),       y = new_select_field(col_y, data_cols, type = \"name\")     ),     expr = quote(       ggplot(mapping = aes(x = .(x), y = .(y)))     ),     class = c(\"ggplot_block\", \"plot_block\"),     ...   ) }"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/plot-block.html","id":"create-a-geom-block","dir":"Articles","previous_headings":"Introduction","what":"Create a geom block","title":"3. Case study: create a plot block","text":"Now valid new_ggplot_block, want add geometry. easiest one geom_point(). keep vignette simple possible, handle two options, namely point color shape. host information new_select_field(), instance: expression straightforward get: Importantly, since use .(color), field name must color conversely shape. Also note , since previous data contains ggplot object, must extract data located data$data, column names obtained data_cols <- function(data) colnames(data$data). finally gives us: Note class plot_layer_block. necessary invoke corresponding evaluate_block() method (use + instead %>%).","code":"new_select_field(default, choices) geom_point(color = .(color), shape = .(shape)) # Don't forget to wrap it with quote(...). new_geompoint_block <- function(color = character(), shape = character(), ...) {    data_cols <- function(data) colnames(data$data)    new_block(     fields = list(       color = new_select_field(color, data_cols, type = \"name\"),       shape = new_select_field(shape, data_cols, type = \"name\")     ),     expr = quote(       geom_point(aes(color = .(color), shape = .(shape)), size = 2)     ),     class = c(\"plot_layer_block\", \"plot_block\"),     ...   ) }"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/plot-block.html","id":"try-it","dir":"Articles","previous_headings":"Introduction","what":"Try it","title":"3. Case study: create a plot block","text":"can try following stack:","code":"stack <- new_stack(   data_block = new_dataset_block(\"penguins\", \"palmerpenguins\"),    plot_block = new_ggplot_block(\"flipper_length_mm\", \"body_mass_g\"),   layer_block = new_geompoint_block(\"species\", \"species\") ) serve_stack(stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/plot-block.html","id":"going-further","dir":"Articles","previous_headings":"Introduction","what":"Going further","title":"3. Case study: create a plot block","text":"Toggle code","code":"library(blockr) library(ggplot2) library(ggiraph)  custom_data_block <- function(...) {   new_dataset_block(     ...,     selected = \"mtcars\"   ) }  new_ggplot_block <- function(...) {    data_cols <- function(data) colnames(data)    new_block(     fields = list(       x = new_select_field(\"wt\", data_cols, type = \"name\"),       y = new_select_field(\"qsec\", data_cols, type = \"name\"),       color = new_select_field(\"disp\", data_cols, type = \"name\")     ),     expr = quote(       ggplot(mapping = aes(x = .(x), y = .(y), color = .(color)))     ),     class = c(\"ggplot_block\", \"plot_block\"),     ...   ) }  # We could have use a mutate_block instead of # changing the data from inside the block ... # {blockr} is flexible here. new_geompoint_interactive_block <- function(...) {   build_expr <- function(data) {     # Get data from the previous ggplot layer     # data is the ggplot so we need to use data$data     # to get the initial data     dat <- data$data     dat$carname <- row.names(dat)     substitute(       geom_point_interactive(         # Pass in new data         data = new_data,         aes(           tooltip = carname,           data_id = carname         )       ),       list(new_data = dat)     )   }    new_block(     fields = list(       expression = new_hidden_field(build_expr)     ),     expr = quote(.(expression)),     class = c(\"plot_layer_block\", \"plot_block\"),     ...   ) }  new_theme_block <- function(...) {   new_block(     fields = list(       theme = new_select_field(         \"theme_minimal\",          grep(\"^theme_.*$\", ls(\"package:ggplot2\"), perl = TRUE, value = TRUE),         type = \"name\"       )     ),     expr = quote(       .(theme)()     ),     class = c(\"plot_layer_block\", \"plot_block\"),     ...   ) }  new_ggiraph_block <- function(...) {   new_block(     fields = list(       pointsize = new_numeric_field(12, min = 1, max = 20)     ),     expr = quote(girafe(ggobj = data, pointsize = .(pointsize))),     class = c(\"ggiraph_block\", \"plot_block\"),     ...   ) }  # Necessary to get ggiraph plot rendering uiOutputBlock.ggiraph_block <- function(x, ns) {   ggiraph::girafeOutput(ns(\"plot\")) }  server_output.ggiraph_block <- function(x, result, output) {   ggiraph::renderGirafe(result()) }  stack <- new_stack(   custom_data_block,   new_ggplot_block,   new_geompoint_interactive_block,   new_theme_block,   new_ggiraph_block ) serve_stack(stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/registry.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"2. Blocks registry","text":"registry environment provides access multiple blocks well metadata: block description. Allowed input (default data.frame, expect new_dataset_block blocks) Returned output. … words, registry “supermarket” data analysis. shown , develop blocks package registers blocks load, blocks become available end user. Therefore makes powerful collaboration data science teams.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/registry.html","id":"previewing-available-blocks","dir":"Articles","previous_headings":"","what":"Previewing available blocks","title":"2. Blocks registry","text":"Upon loading, blockr registers internal blocks register_blockr_blocks(). won’t call function exported anyway. makes registry environment ready queried available_blocks(). truncated output example :","code":"$dataset_block function(...) {   ... } <environment: namespace:blockr> attr(,\"name\") [1] \"data block\" attr(,\"description\") [1] \"Choose a dataset from a package\" attr(,\"classes\") [1] \"dataset_block\" \"data_block\"    attr(,\"input\") [1] NA attr(,\"output\") [1] \"data.frame\" attr(,\"package\") [1] \"blockr\" attr(,\"class\") [1] \"block_descr\"  $select_block function(data, ...) {   ... } <environment: namespace:blockr> attr(,\"name\") [1] \"select block\" attr(,\"description\") [1] \"select columns in a table\" attr(,\"classes\") [1] \"select_block\"    \"transform_block\" attr(,\"input\") [1] \"data.frame\" attr(,\"output\") [1] \"data.frame\" attr(,\"package\") [1] \"blockr\" attr(,\"class\") [1] \"block_descr\" names(available_blocks()) #>  [1] \"arrange_block\"      \"csv_block\"          \"dataset_block\"      #>  [4] \"filesbrowser_block\" \"filter_block\"       \"group_by_block\"     #>  [7] \"head_block\"         \"join_block\"         \"json_block\"         #> [10] \"mutate_block\"       \"rds_block\"          \"result_block\"       #> [13] \"select_block\"       \"summarize_block\"    \"upload_block\"       #> [16] \"xpt_block\""},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/registry.html","id":"register-a-block","dir":"Articles","previous_headings":"","what":"Register a block","title":"2. Blocks registry","text":"register blocks, user facing functions : register_block() register block registry. block already registered, overwrites existing one. register_blocks() register multiple blocks. Let’s say want create new new_tail_block returns n last rows selected dataset: now query registry, new block available: can now run demo app add blocks. new tail_block visible new choices: register multiple blocks:","code":"new_tail_block <- function(data, n_rows = numeric(), ...) {   n_rows_max <- function(data) nrow(data)    new_block(     fields = list(       n_rows = new_numeric_field(n_rows, 1L, n_rows_max)     ),     expr = quote(tail(n = .(n_rows))),     class = c(\"tail_block\", \"transform_block\"),     ...   ) }  register_block(   constructor = new_tail_block,   name = \"tail block\",   description = \"return last n rows\",   category = \"transform\",   classes = c(\"tail_block\", \"transform_block\"),   input = \"data.frame\",   output = \"data.frame\" ) names(available_blocks()) #>  [1] \"arrange_block\"      \"csv_block\"          \"dataset_block\"      #>  [4] \"filesbrowser_block\" \"filter_block\"       \"group_by_block\"     #>  [7] \"head_block\"         \"join_block\"         \"json_block\"         #> [10] \"mutate_block\"       \"rds_block\"          \"result_block\"       #> [13] \"select_block\"       \"summarize_block\"    \"tail_block\"         #> [16] \"upload_block\"       \"xpt_block\" register_blocks(   constructor = c(     new_dataset_block, new_filter_block, new_select_block, new_summarize_block   ),   name = c(     \"data block\", \"filter block\", \"select block\", \"summarize block\"   ),   description = c(     \"choose a dataset in a package\",     \"filter rows in a table\",     \"select columns in a table\",     \"summarize data groups\"   ),   category = c(\"data\", rep(\"transform\", 3)),   classes = list(     c(\"dataset_block\", \"data_block\"),     c(\"filter_block\", \"transform_block\", \"submit_block\"),     c(\"select_block\", \"transform_block\"),     c(\"summarize_block\", \"transform_block\", \"submit_block\")   ),   input = c(NA_character_, \"data.frame\", \"data.frame\", \"data.frame\"),   output = c(\"data.frame\", \"data.frame\", \"data.frame\", \"data.frame\"),   package = \"<PKG_NAME>\" )"},{"path":"https://bristolmyerssquibb.github.io/blockr/articles/registry.html","id":"unregister-a-block","dir":"Articles","previous_headings":"","what":"Unregister a block","title":"2. Blocks registry","text":"counterpart register_block() unregister_blocks(). can remove new tail_block registry: ids first entry applied class attributes block created, tail_block. remove multiple blocks , can pass vector ids.","code":"unregister_blocks(ids = \"tail_block\")  # Check it out names(available_blocks()) #>  [1] \"arrange_block\"      \"csv_block\"          \"dataset_block\"      #>  [4] \"filesbrowser_block\" \"filter_block\"       \"group_by_block\"     #>  [7] \"head_block\"         \"join_block\"         \"json_block\"         #> [10] \"mutate_block\"       \"rds_block\"          \"result_block\"       #> [13] \"select_block\"       \"summarize_block\"    \"upload_block\"       #> [16] \"xpt_block\""},{"path":"https://bristolmyerssquibb.github.io/blockr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas Bennett. Author, maintainer. David Granjon. Author. John Coene. Author. Bristol Myers Squibb. Copyright holder, funder.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bennett N, Granjon D, Coene J (2024). blockr: block-based framework data manipulation visualization. R package version 0.0.2.9010, https://bristolmyerssquibb.github.io/blockr.","code":"@Manual{,   title = {blockr: A block-based framework for data manipulation and visualization},   author = {Nicolas Bennett and David Granjon and John Coene},   year = {2024},   note = {R package version 0.0.2.9010},   url = {https://bristolmyerssquibb.github.io/blockr}, }"},{"path":"https://bristolmyerssquibb.github.io/blockr/index.html","id":"blockr","dir":"","previous_headings":"","what":"Building blocks for data manipulation and visualization operations.","title":"Building blocks for data manipulation and visualization operations.","text":"{blockr} Shiny’s WordPress (John Coene, 2024)","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/index.html","id":"why-blockr","dir":"","previous_headings":"","what":"Why blockr?","title":"Building blocks for data manipulation and visualization operations.","text":"blockr R package designed democratize data analysis providing flexible, intuitive, code-free approach building data pipelines.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/index.html","id":"who-is-it-for","dir":"","previous_headings":"","what":"Who is it for?","title":"Building blocks for data manipulation and visualization operations.","text":"blockr 2 main user targets: one hand, empowers non technical users create insightful data workflows using pre-built blocks can easily connected, without writing single line code. simple pre-built case study involving blockr. use palmerpenguins dataset find femal species largest flippers. tiny dashboard composed 4 steps: import data, filter, create plot chose geometry (points). Within step (block), user can change inputs see changes propagate real time. Notice filter step requires press submit button moving forward, prevents plot appearing first. prevent long running task run unecessarily. can find vignettes. can course start totally empty dashboard create analysis scratch. hand, provides developers set tools seamlessly create new blocks, thereby enhancing entire framework fostering collaboration within organizations teams. instance, regarding previous example, takes create dashboard. Note {blockr.ggplot2} package exposes ready use blocks shown .","code":"library(blockr) library(palmerpenguins) library(ggplot2)  new_ggplot_block <- function(col_x = character(), col_y = character(), ...) {    data_cols <- function(data) colnames(data)    new_block(     fields = list(       x = new_select_field(col_x, data_cols, type = \"name\"),       y = new_select_field(col_y, data_cols, type = \"name\")     ),     expr = quote(       ggplot(mapping = aes(x = .(x), y = .(y)))     ),     class = c(\"ggplot_block\", \"plot_block\"),     ...   ) }  new_geompoint_block <- function(color = character(), shape = character(), ...) {    data_cols <- function(data) colnames(data$data)    new_block(     fields = list(       color = new_select_field(color, data_cols, type = \"name\"),       shape = new_select_field(shape, data_cols, type = \"name\")     ),     expr = quote(       geom_point(aes(color = .(color), shape = .(shape)), size = 2)     ),     class = c(\"plot_layer_block\", \"plot_block\"),     ...   ) }  stack <- new_stack(   data_block = new_dataset_block(\"penguins\", \"palmerpenguins\"),   filter_block = new_filter_block(\"sex\", \"female\"),   plot_block = new_ggplot_block(\"flipper_length_mm\", \"body_mass_g\"),   layer_block = new_geompoint_block(\"species\", \"species\") ) serve_stack(stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/index.html","id":"how-to-get-started","dir":"","previous_headings":"","what":"How to get started?","title":"Building blocks for data manipulation and visualization operations.","text":"get started, invite read vignette. get better idea blockr capabilities various data context, can look vignette.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key features","title":"Building blocks for data manipulation and visualization operations.","text":"User-Friendly Interface: Build data pipelines intuitive interface. Flexibility: Easily add, remove, rearrange blocks pipeline. Extensibility: Developers can create custom blocks extend functionality. Reproducibility: Pipelines created blockr easily shareable reproducible, exportable code. Interactivity: Real-time feedback build modify pipeline.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Building blocks for data manipulation and visualization operations.","text":"can install development version blockr GitHub :","code":"pak::pak(\"BristolMyersSquibb/blockr\")"},{"path":"https://bristolmyerssquibb.github.io/blockr/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Building blocks for data manipulation and visualization operations.","text":"Easiest run make, otherwise: Install npm dependencies packer::npm_install() Build CSS running script dev/sass.R","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/add_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Add block server generic — add_block_server","title":"Add block server generic — add_block_server","text":"modules aims showing extra info offcanvas menu add blocks. Blocks added stack level another function, add_block_stack. modules aims showing extra info offcanvas menu add blocks. Blocks added stack level another function, add_block_stack. called oustide stack modules. Useful allow stack add blocks . Useful allow stack add blocks . selected block can accessed input$search within add_block_server.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/add_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add block server generic — add_block_server","text":"","code":"add_block_server(x, ...)  # Default S3 method add_block_server(x, id, vals, ...)  add_block(stack, block, position = NULL)  add_block_ui(x, ...)  # Default S3 method add_block_ui(x, id, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/add_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add block server generic — add_block_server","text":"x Stack object. ... generic consistency id Module id. vals Reactive values. stack stack update. See new_stack. block Block insert. position insert new block. NULL, block added last position.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/add_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add block server generic — add_block_server","text":"Invisibly returns stack.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/available_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Block registry — available_blocks","title":"Block registry — available_blocks","text":"List available blocks.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/available_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block registry — available_blocks","text":"","code":"available_blocks()  block_name(blocks = available_blocks())  block_descr(blocks = available_blocks())  register_block(   constructor,   name,   description,   classes,   input,   output,   package = NA_character_,   category = \"uncategorized\" )  register_blocks(   constructor,   name,   description,   classes,   input,   output,   package = NA_character_,   category = \"uncategorized\" )  unregister_blocks(ids = NULL, package = NULL)  construct_block(block, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/available_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block registry — available_blocks","text":"blocks Block description object(s) constructor Block constructor name, description Metadata describing block classes Block classes input, output Object types block consumes produces package Package block defined category Useful sort blocks topics. specified, blocks uncategorized. ids Character vector block IDs (first entry class attribute) block Block name description object ... Forwarded register_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Block body generic — block_body","title":"Block body generic — block_body","text":"Generic creating fields UI container","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block body generic — block_body","text":"","code":"block_body(x, ...)  # S3 method for class 'block' block_body(x, ns, inputs_hidden, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block body generic — block_body","text":"x Object generate UI components ... Generic consistency ns Module namespace inputs_hidden styling purposes: CSS class apply block collapsed.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Block code generic — block_code","title":"Block code generic — block_code","text":"Generic creating block code UI elements toggle code container.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block code generic — block_code","text":"","code":"block_code(x, ...)  # S3 method for class 'block' block_code(x, ns, inputs_hidden, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block code generic — block_code","text":"x Object generate UI components ... Generic consistency ns Module namespace inputs_hidden styling purposes: CSS class apply block collapsed.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_combiner.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine 2 block expressions — block_combiner","title":"Combine 2 block expressions — block_combiner","text":"Useful generate_code.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_combiner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine 2 block expressions — block_combiner","text":"","code":"block_combiner(left, right, ...)  # S3 method for class 'transform_block' block_combiner(left, right, ...)  # S3 method for class 'plot_block' block_combiner(left, right, ...)  # S3 method for class 'plot_layer_block' block_combiner(left, right, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_combiner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine 2 block expressions — block_combiner","text":"left Left block object x %>% y. right Right block object x %>% y. ... generic consistency.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Block header generic — block_header","title":"Block header generic — block_header","text":"Generic creating block header.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block header generic — block_header","text":"","code":"block_header(x, ...)  # S3 method for class 'block' block_header(x, ns, hidden_class, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block header generic — block_header","text":"x Object generate UI components ... Generic consistency ns Module namespace hidden_class TBD.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Block icon generic — block_icon","title":"Block icon generic — block_icon","text":"Create block icon depending block class","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block icon generic — block_icon","text":"","code":"block_icon(x, ...)  # Default S3 method block_icon(x, ...)  # S3 method for class 'data_block' block_icon(x, ...)  # S3 method for class 'transform_block' block_icon(x, ...)  # S3 method for class 'plot_block' block_icon(x, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/block_icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block icon generic — block_icon","text":"x Object inheriting \"block\". ... generic consistency.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/blockr_serialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Serialization — blockr_serialize","title":"Serialization — blockr_serialize","text":"Object (de)serialization.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/blockr_serialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serialization — blockr_serialize","text":"","code":"blockr_serialize(x)  # S3 method for class 'field' blockr_serialize(x)  # S3 method for class 'block' blockr_serialize(x)  # S3 method for class 'stack' blockr_serialize(x)  # S3 method for class 'workspace' blockr_serialize(x)  blockr_deserialize(x)  from_json(x)  to_json(x = get_workspace())"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/blockr_serialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serialization — blockr_serialize","text":"x Object (de)serialize","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/create_app_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Create shinylive iframe — create_app_link","title":"Create shinylive iframe — create_app_link","text":"Useful pkgdown website","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/create_app_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create shinylive iframe — create_app_link","text":"","code":"create_app_link(url, mode = c(\"app\", \"editor\"), header = TRUE)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/create_app_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create shinylive iframe — create_app_link","text":"url app url. shinylive link. mode display shinylive app. Default app mode. header Whether display shinylive header. Default TRUE.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/create_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new block — create_block","title":"Create a new block — create_block","text":"Create new block","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/create_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new block — create_block","text":"","code":"create_block(name, type = c(\"transform\", \"plot\"), file = NULL)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/create_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new block — create_block","text":"name Block name. type Type block create. file Output file. NULL constructs R/<name>-block.R.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/create_modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Create and show a Bootstrap modal — create_modal","title":"Create and show a Bootstrap modal — create_modal","text":"TBD.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/create_modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create and show a Bootstrap modal — create_modal","text":"","code":"create_modal(...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/create_modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create and show a Bootstrap modal — create_modal","text":"... Modal content.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/data_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Data info generic — data_info","title":"Data info generic — data_info","text":"Generic creating data info tags, display number columns, rows, ...","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/data_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data info generic — data_info","text":"","code":"data_info(x, ...)  # S3 method for class 'block' data_info(x, ns, ...)  # S3 method for class 'data_block' data_info(x, ns, ...)  # S3 method for class 'transform_block' data_info(x, ns, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/data_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data info generic — data_info","text":"x Object generate UI components ... Generic consistency ns Module namespace","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/download_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Block download generic — download_ui","title":"Block download generic — download_ui","text":"Generic create block download button.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/download_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block download generic — download_ui","text":"","code":"download_ui(x, ...)  # S3 method for class 'block' download_ui(x, ns, inputs_hidden = FALSE, ...)  # S3 method for class 'transform_block' download_ui(x, ns, inputs_hidden = FALSE, ...)  # S3 method for class 'data_block' download_ui(x, ns, inputs_hidden = FALSE, ...)  # S3 method for class 'plot_block' download_ui(x, ns, inputs_hidden = FALSE, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/download_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block download generic — download_ui","text":"x Object generate UI components ... Generic consistency ns Module namespace inputs_hidden styling purposes: CSS class apply block collapsed.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/evaluate_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a block generic — evaluate_block","title":"Evaluate a block generic — evaluate_block","text":"Calls generate_code evaluate relevant environment.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/evaluate_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a block generic — evaluate_block","text":"","code":"evaluate_block(x, ...)  # S3 method for class 'data_block' evaluate_block(x, ...)  # S3 method for class 'block' evaluate_block(x, data, ...)  # S3 method for class 'plot_layer_block' evaluate_block(x, data, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/evaluate_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a block generic — evaluate_block","text":"x object inheriting \"block\" ... generic consistency. data Result previous block","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/exprs_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a UI element for expressions — exprs_ui","title":"Create a UI element for expressions — exprs_ui","text":"function generates UI element inputting expressions Shiny application. includes two shinyAce::aceEditor elements inputting name value new column.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/exprs_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a UI element for expressions — exprs_ui","text":"","code":"exprs_ui(   id = \"\",   value_name = \"newcol\",   value_val = NULL,   delete_button = TRUE,   key = c(\"suggest\", \"empty\", \"none\"),   auto_complete_list = NULL )"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/exprs_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a UI element for expressions — exprs_ui","text":"id Character string, identifier UI element. value_name Default name new column. value_val Default value new column. delete_button delete button shown? key display 'key' field auto_complete_list auto_complete_list, passed shinyAce::aceEditor()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/exprs_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a UI element for expressions — exprs_ui","text":"div element containing UI components.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/exprs_ui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a UI element for expressions — exprs_ui","text":"","code":"if (FALSE) { # \\dontrun{ library(shiny) library(shinyAce) shinyApp(   ui = bslib::page_fluid(     exprs_ui(value_name = \"bla\", value_val = \"blabla\")   ),   server = function(input, output) {} ) } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/filesbrowser_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Files browser field constructor — new_filesbrowser_field","title":"Files browser field constructor — new_filesbrowser_field","text":"Files browser fields translated shinyFilesButton","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/filesbrowser_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Files browser field constructor — new_filesbrowser_field","text":"","code":"new_filesbrowser_field(value = character(), volumes = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/filesbrowser_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Files browser field constructor — new_filesbrowser_field","text":"value Default text input value. volumes Paths accessible shinyFiles browser ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/generate_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate code generic — generate_code","title":"Generate code generic — generate_code","text":"given block, generate code contained expr attribute. Needed evaluate_block block_combiner generate entire stack code.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/generate_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate code generic — generate_code","text":"","code":"generate_code(x)  # S3 method for class 'block' generate_code(x)  # S3 method for class 'arrange_block' generate_code(x)  # S3 method for class 'group_by_block' generate_code(x)  # S3 method for class 'transform_block' generate_code(x)  # S3 method for class 'plot_block' generate_code(x)  # S3 method for class 'data_block' generate_code(x)  # S3 method for class 'call' generate_code(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/generate_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate code generic — generate_code","text":"x object inheriting \"block\"","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/generate_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for server generation — generate_server","title":"Generic for server generation — generate_server","text":"Calls shiny modules given element (workspace, stack, block).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/generate_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for server generation — generate_server","text":"","code":"generate_server(x, ...)  # S3 method for class 'result_field' generate_server(x, ...)  # S3 method for class 'data_block' generate_server(x, id, ...)  # S3 method for class 'transform_block' generate_server(x, in_dat, id, is_prev_valid, ...)  # S3 method for class 'plot_block' generate_server(x, in_dat, id, is_prev_valid, ...)  # S3 method for class 'stack' generate_server(   x,   id = NULL,   new_block = NULL,   workspace = get_workspace(),   ... )  # S3 method for class 'workspace' generate_server(x, id, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/generate_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for server generation — generate_server","text":"x Object generate moduleServer() ... Generic consistency id Unique module id. Useful workspace called module. in_dat Reactive input data is_prev_valid Useful validate current block new_block dynamically inserted blocks. workspace Stack workspace","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/generate_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI — generate_ui","title":"UI — generate_ui","text":"Generic UI generation","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/generate_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI — generate_ui","text":"","code":"generate_ui(x, ...)  # S3 method for class 'block' generate_ui(x, id, ..., .hidden = !getOption(\"BLOCKR_DEV\", FALSE))  # S3 method for class 'stack' generate_ui(x, id = NULL, ...)  # S3 method for class 'workspace' generate_ui(x, id, ...)  # S3 method for class 'list_field' input_ids(x, name, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/generate_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI — generate_ui","text":"x Object generate UI components ... Generic consistency id UI IDs .hidden Whether initialise block hidden. name Input name.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/get_compatible_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Find stack compatible blocks — get_compatible_blocks","title":"Find stack compatible blocks — get_compatible_blocks","text":"Given stack, use registry find blocks compatible last stack block. stack empy, return data blocks.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/get_compatible_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find stack compatible blocks — get_compatible_blocks","text":"","code":"get_compatible_blocks(stack)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/get_compatible_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find stack compatible blocks — get_compatible_blocks","text":"stack Stack object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/get_compatible_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find stack compatible blocks — get_compatible_blocks","text":"dataframe.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/get_registry.html","id":null,"dir":"Reference","previous_headings":"","what":"List available blocks as a data.frame — get_registry","title":"List available blocks as a data.frame — get_registry","text":"Provides alternate way displaying registry information. can useful create dynamic UI elements like add_block_ui.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/get_registry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available blocks as a data.frame — get_registry","text":"","code":"get_registry()"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/get_registry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List available blocks as a data.frame — get_registry","text":"dataframe.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/handle_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove stack/block generic — handle_remove","title":"Remove stack/block generic — handle_remove","text":"Generic stack/block removal Necessary able remove block stack.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/handle_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove stack/block generic — handle_remove","text":"","code":"handle_remove(x, ...)  # S3 method for class 'block' handle_remove(x, vals, session = getDefaultReactiveDomain(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/handle_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove stack/block generic — handle_remove","text":"x Object generate moduleServer() ... Generic consistency vals Internal reactive values. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/hidden_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Hidden field constructor — new_hidden_field","title":"Hidden field constructor — new_hidden_field","text":"Hidden field useful host complex expression field. See new_filter_block usecase.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/hidden_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hidden field constructor — new_hidden_field","text":"","code":"new_hidden_field(value = expression(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/hidden_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hidden field constructor — new_hidden_field","text":"value Default text input value. ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for server initialisation — init","title":"Generic for server initialisation — init","text":"Handle initialisation workspace, stacks, ...","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for server initialisation — init","text":"","code":"init(x, ...)  # S3 method for class 'workspace' init(x, vals, session, ...)  # S3 method for class 'stack' init(x, vals, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for server initialisation — init","text":"x Object generate moduleServer() ... Generic consistency vals Internal reactive values. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/init_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Init a single block — init_block","title":"Init a single block — init_block","text":"Useful init.blocks also called add_block.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/init_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Init a single block — init_block","text":"","code":"init_block(i, vals)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/init_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Init a single block — init_block","text":"Block position vals Reactive values containing stack","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/init_lock.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise Lock Initialises the lock reactive value. — init_lock","title":"Initialise Lock Initialises the lock reactive value. — init_lock","text":"Initialise Lock Initialises lock reactive value.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/init_lock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise Lock Initialises the lock reactive value. — init_lock","text":"","code":"init_lock(session = shiny::getDefaultReactiveDomain(), ignore_init = FALSE)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/init_lock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise Lock Initialises the lock reactive value. — init_lock","text":"session Shiny session. ignore_init Whether ignore initialisation. used need initialise lock toggle_lock().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 generic for initialization — is_initialized","title":"S3 generic for initialization — is_initialized","text":"Checks block field (currently implemented methods) initialized.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 generic for initialization — is_initialized","text":"","code":"is_initialized(x)  # S3 method for class 'block' is_initialized(x)  # S3 method for class 'field' is_initialized(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 generic for initialization — is_initialized","text":"x Element check.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 generic for initialization — is_initialized","text":"Boolean value.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize block generic — initialize_block","title":"Initialize block generic — initialize_block","text":"Initializes fields composing block.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize block generic — initialize_block","text":"","code":"initialize_block(x, ...)  # S3 method for class 'data_block' initialize_block(x, ...)  # S3 method for class 'block' initialize_block(x, data, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize block generic — initialize_block","text":"x object inheriting \"block\" ... generic consistency. data Result previous block","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize block generic — initialize_block","text":"block element.","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize field generic — initialize_field","title":"Initialize field generic — initialize_field","text":"TBD","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize field generic — initialize_field","text":"","code":"initialize_field(x, env = list())  # S3 method for class 'field' initialize_field(x, env = list())"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize field generic — initialize_field","text":"x object inheriting form \"field\" env Environment data field values","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/initialize_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize field generic — initialize_field","text":"field.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/inject_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject block into stack — inject_block","title":"Inject block into stack — inject_block","text":"Called workspace.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/inject_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject block into stack — inject_block","text":"","code":"inject_block(input, vals, id)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/inject_remove_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject remove button into block header — inject_remove_button","title":"Inject remove button into block header — inject_remove_button","text":"called stack parent namespace. can also called dynamically inserting new block within stack. called workspace parent namespace. can also called dynamically inserting new stack within workspace.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/inject_remove_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject remove button into block header — inject_remove_button","text":"","code":"inject_remove_button(x, ...)  # S3 method for class 'block' inject_remove_button(x, ns, .hidden = !getOption(\"BLOCKR_DEV\", FALSE), ...)  # S3 method for class 'stack' inject_remove_button(x, id, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/inject_remove_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject remove button into block header — inject_remove_button","text":"x Object generate UI components ... Generic consistency ns Parent namespace. .hidden Whether initialise block hidden inputs. id Parent ID","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/is_whole.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if number is whole — is_whole","title":"Check if number is whole — is_whole","text":"Check number whole","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/is_whole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if number is whole — is_whole","text":"","code":"is_whole(n = 0L)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/is_whole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if number is whole — is_whole","text":"n Number check.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/keyvalue_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Key Value Field server — generate_server.keyvalue_field","title":"Key Value Field server — generate_server.keyvalue_field","text":"Server module TBD","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/keyvalue_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Key Value Field server — generate_server.keyvalue_field","text":"","code":"# S3 method for class 'keyvalue_field' generate_server(x, ...)  # S3 method for class 'keyvalue_field' ui_input(x, id, name)  new_keyvalue_field(   value = NULL,   multiple = TRUE,   submit = TRUE,   key = c(\"suggest\", \"empty\", \"none\"),   ... )  keyvalue_field(...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/keyvalue_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Key Value Field server — generate_server.keyvalue_field","text":"x Object generate UI components ... Generic consistency id UI IDs name Field name. value Field value multiple Allow multiple selection submit 'submit button' shown? key display 'key' field","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Default layout for fields Default layout for fields, places fields on rows and collapses parts of inputs when there are too many. — layout","title":"Default layout for fields Default layout for fields, places fields on rows and collapses parts of inputs when there are too many. — layout","text":"Default layout fields Default layout fields, places fields rows collapses parts inputs many.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default layout for fields Default layout for fields, places fields on rows and collapses parts of inputs when there are too many. — layout","text":"","code":"layout(x, fields, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default layout for fields Default layout for fields, places fields on rows and collapses parts of inputs when there are too many. — layout","text":"x Object (block). fields Named list fields. ... Currently ignored.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/layout_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Layout fields on rows. — layout_fields","title":"Layout fields on rows. — layout_fields","text":"Layout fields rows.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/layout_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layout fields on rows. — layout_fields","text":"","code":"layout_fields(fields)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/list_field.html","id":null,"dir":"Reference","previous_headings":"","what":"List field constructor — new_list_field","title":"List field constructor — new_list_field","text":"field can contain subfields. See new_filter_block usecase.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/list_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List field constructor — new_list_field","text":"","code":"new_list_field(sub_fields = list(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/list_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List field constructor — new_list_field","text":"sub_fields Fields contained list_field ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/lock.html","id":null,"dir":"Reference","previous_headings":"","what":"Lock — lock","title":"Lock — lock","text":"Lock edit stacks blocks.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/lock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lock — lock","text":"","code":"lock(session = shiny::getDefaultReactiveDomain())  unlock(session = shiny::getDefaultReactiveDomain())  toggle_lock(session = shiny::getDefaultReactiveDomain())  is_locked(session = shiny::getDefaultReactiveDomain())  observe_lock(fn, ..., session = shiny::getDefaultReactiveDomain())"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/lock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lock — lock","text":"session Shiny session. fn Callback function run editing locked/unlocked. must accept single argument, boolean indicating whether editing locked . ... passed shiny::observeEvent().","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_arrange_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange block — new_arrange_block","title":"Arrange block — new_arrange_block","text":"block provides access arrange verb returns dataframe.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_arrange_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange block — new_arrange_block","text":"","code":"new_arrange_block(columns = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_arrange_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange block — new_arrange_block","text":"columns Column(s) select. ... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Blocks — new_block","title":"Blocks — new_block","text":"Blocks consist set fields, expression defines block produces (given result previous block combined user input), plus meta data.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blocks — new_block","text":"","code":"new_block(fields, expr, name = rand_names(), ..., class = character())  is_block(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blocks — new_block","text":"fields list field, entry inheriting \"field\" expr quoted expression (compatible partial substitution implemented base::bquote() intended evaluation context fields) name Block name ... (metadata) attributes class Block subclass x object inheriting \"block\"","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_dataset_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Data block constructor — new_dataset_block","title":"Data block constructor — new_dataset_block","text":"block allows selected data package, default datasets.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_dataset_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data block constructor — new_dataset_block","text":"","code":"new_dataset_block(selected = character(), package = \"datasets\", ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_dataset_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data block constructor — new_dataset_block","text":"selected Selected dataset package Name R package containing datasets ... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Fields — new_field","title":"Fields — new_field","text":"block consists set fields, define type value field holds can used customize UI generated.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fields — new_field","text":"","code":"new_field(   value,   ...,   type = c(\"literal\", \"name\"),   title = \"\",   descr = \"\",   status = c(\"active\", \"disabled\", \"invisible\"),   class = character() )  is_field(x)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fields — new_field","text":"value Field value ... field components type Field type (allowed values \"literal\" \"name\") title brief title field, primarily display purposes. descr description field, explaining purpose usage. status status field (experimental) class Field subclass feature. Default FALSE. yet used. x object inheriting form \"field\"","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_filesbrowser_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Files browser block constructor — new_filesbrowser_block","title":"Files browser block constructor — new_filesbrowser_block","text":"block allows browse files server app running. falls back user file system running locally. block outputs string containing file path.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_filesbrowser_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Files browser block constructor — new_filesbrowser_block","text":"","code":"new_filesbrowser_block(   file_path = character(),   volumes = c(home = path.expand(\"~\")),   ... )"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_filesbrowser_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Files browser block constructor — new_filesbrowser_block","text":"file_path File path volumes Paths accessible shinyFiles browser ... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_filter_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter block — new_filter_block","title":"Filter block — new_filter_block","text":"block provides access filter verb returns filtered data.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_filter_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter block — new_filter_block","text":"","code":"new_filter_block(   columns = character(),   values = character(),   filter_fun = \"==\",   ... )"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_filter_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter block — new_filter_block","text":"columns Columns used filtering values Values used filtering filter_fun Filter function expression ... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_group_by_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by block — new_group_by_block","title":"Group by block — new_group_by_block","text":"block provides access group_by verb returns dataframe.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_group_by_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by block — new_group_by_block","text":"","code":"new_group_by_block(columns = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_group_by_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by block — new_group_by_block","text":"columns Column(s) select. ... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_head_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Head block — new_head_block","title":"Head block — new_head_block","text":"allows select first n rows input dataframe.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_head_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Head block — new_head_block","text":"","code":"new_head_block(n_rows = numeric(), n_rows_min = 1L, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_head_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Head block — new_head_block","text":"n_rows Number rows return. n_rows_min Minimum number rows. ... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_join_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Join block — new_join_block","title":"Join block — new_join_block","text":"block provides access dplyr join verbs returns dataframe. blocks made work multiple stack y parameter expects dataframe another stack.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_join_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join block — new_join_block","text":"","code":"new_join_block(y = NULL, type = character(), by = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_join_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join block — new_join_block","text":"y Second dataset join. type Join type. Join columns. ... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_mutate_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate block constructor — new_mutate_block","title":"Mutate block constructor — new_mutate_block","text":"Leverages keyvalue_field","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_mutate_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate block constructor — new_mutate_block","text":"","code":"new_mutate_block(value = NULL, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_mutate_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate block constructor — new_mutate_block","text":"value Default value. ... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_parser_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Data parser block constructor — new_parser_block","title":"Data parser block constructor — new_parser_block","text":"new_parser_block: block allows create data parsing block. Unless need new data parser, need use directly. csv_block: string given new_filesbrowser_block new_upload_block, reads related CSV file returns dataframe. rds_block: string given new_filesbrowser_block new_upload_block, reads related rds file returns dataframe. json_block: string given new_filesbrowser_block new_upload_block, reads related json file returns dataframe. csv_block: string given new_filesbrowser_block new_upload_block, reads related XPT file returns dataframe.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_parser_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data parser block constructor — new_parser_block","text":"","code":"new_parser_block(expr, fields = list(), ..., class = character())  new_csv_block(...)  new_rds_block(...)  new_json_block(...)  new_xpt_block(...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_parser_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data parser block constructor — new_parser_block","text":"expr quoted expression (compatible partial substitution implemented base::bquote() intended evaluation context fields) fields list field, entry inheriting \"field\" ... (metadata) attributes class Block subclass","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_result_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Result block — new_result_block","title":"Result block — new_result_block","text":"result blocks allows one reuse data one stack another one. relevant single stack apps.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_result_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Result block — new_result_block","text":"","code":"new_result_block(...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_result_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Result block — new_result_block","text":"... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_select_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Select block — new_select_block","title":"Select block — new_select_block","text":"block provides access select verb returns dataframe selected columns.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_select_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select block — new_select_block","text":"","code":"new_select_block(columns = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_select_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select block — new_select_block","text":"columns Column(s) select. ... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacks — new_stack","title":"Stacks — new_stack","text":"set blocks can assembled stack.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacks — new_stack","text":"","code":"new_stack(..., title = \"Stack\", name = rand_names())  is_stack(x)  get_stack_name(x)  set_stack_name(x, name)  set_stack_title(x, title)  get_stack_title(x)  # S3 method for class 'stack' generate_code(x)  serve_stack(stack, id = \"my_stack\")"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacks — new_stack","text":"... ordered set blocks (argument required inherit \"block\") title Stack title name Stack name x object inheriting form \"stack\" stack object inheriting form \"stack\" id Stack ID","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_summarize_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize block — new_summarize_block","title":"Summarize block — new_summarize_block","text":"block provides access summarize verb returns dataframe transformed columns.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_summarize_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize block — new_summarize_block","text":"","code":"new_summarize_block(func = character(), default_columns = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_summarize_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize block — new_summarize_block","text":"func Summarize function apply. default_columns know advance function apply, can also pass predefined selected column summary. Therefore length 0, columns length func. ... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_upload_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload block constructor — new_upload_block","title":"Upload block constructor — new_upload_block","text":"block allows upload data user files system. block outputs string containing file path.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_upload_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload block constructor — new_upload_block","text":"","code":"new_upload_block(file_path = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/new_upload_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload block constructor — new_upload_block","text":"file_path File path ... (metadata) attributes","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/numeric_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Numeric field constructor — new_numeric_field","title":"Numeric field constructor — new_numeric_field","text":"Numeric fields translated numericInput","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/numeric_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numeric field constructor — new_numeric_field","text":"","code":"new_numeric_field(value = numeric(), min = numeric(), max = numeric(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/numeric_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numeric field constructor — new_numeric_field","text":"value Default text input value. min Minimum allowed value max Maximum allowed value ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/off_canvas.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap 5 offcanvas — off_canvas","title":"Bootstrap 5 offcanvas — off_canvas","text":"Sidebar like element either top, bottom, right left.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/off_canvas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap 5 offcanvas — off_canvas","text":"","code":"off_canvas(id, title, ..., position = c(\"start\", \"top\", \"bottom\", \"end\"))"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/off_canvas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap 5 offcanvas — off_canvas","text":"id Unique id. Must triggered button whose data-bs-target attributes matches id. title Title. ... Body content. position Either start (left), top, bottom end (right).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/off_canvas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap 5 offcanvas — off_canvas","text":"Boolean. TRUE dependency found.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/range_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Range field constructor — new_range_field","title":"Range field constructor — new_range_field","text":"Range fields translated sliderInput.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/range_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Range field constructor — new_range_field","text":"","code":"new_range_field(value = numeric(), min = numeric(), max = numeric(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/range_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Range field constructor — new_range_field","text":"value Default text input value. min, max Slider boundaries (inclusive) ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/remove_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Block remove generic — remove_button","title":"Block remove generic — remove_button","text":"Generic creating block remove button.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/remove_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block remove generic — remove_button","text":"","code":"remove_button(x, ...)  # S3 method for class 'block' remove_button(x, id, ...)  # S3 method for class 'stack' remove_button(x, id, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/remove_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block remove generic — remove_button","text":"x Object generate UI components ... Generic consistency id Parent ID","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/result_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Result field constructor — new_result_field","title":"Result field constructor — new_result_field","text":"Result field allows reuse result one stack another stack.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/result_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Result field constructor — new_result_field","text":"","code":"new_result_field(value = list(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/result_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Result field constructor — new_result_field","text":"value Default text input value. ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/select_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Select field constructor — new_select_field","title":"Select field constructor — new_select_field","text":"Select fields translated selectInput","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/select_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select field constructor — new_select_field","text":"","code":"new_select_field(   value = character(),   choices = character(),   multiple = FALSE,   ... )"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/select_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select field constructor — new_select_field","text":"value Default text input value. choices Select choices multiple Allow multiple selection ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/send_error_to_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Sends validation error to user interface — send_error_to_ui","title":"Sends validation error to user interface — send_error_to_ui","text":"Depending whether inputs invalid.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/send_error_to_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sends validation error to user interface — send_error_to_ui","text":"","code":"send_error_to_ui(blk, is_valid, session)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/send_error_to_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sends validation error to user interface — send_error_to_ui","text":"blk Block. is_valid Block valid status. session Shiny session object.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/send_error_to_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sends validation error to user interface — send_error_to_ui","text":"Side effects.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/server_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Server code generic — server_code","title":"Server code generic — server_code","text":"Generate server code output.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/server_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server code generic — server_code","text":"","code":"server_code(x, state, output)  # S3 method for class 'block' server_code(x, state, output)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/server_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server code generic — server_code","text":"x Block. state Block state output Shiny output","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/server_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Server output generic — server_output","title":"Server output generic — server_output","text":"Generate block server output. Needed UI side. generally table containing processed block data.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/server_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server output generic — server_output","text":"","code":"server_output(x, result, output)  # S3 method for class 'block' server_output(x, result, output)  # S3 method for class 'upload_block' server_output(x, result, output)  # S3 method for class 'filesbrowser_block' server_output(x, result, output)  # S3 method for class 'plot_block' server_output(x, result, output)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/server_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server output generic — server_output","text":"x Block. result Block result output Shiny output","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/set_workspace.html","id":null,"dir":"Reference","previous_headings":"","what":"Workspace — set_workspace","title":"Workspace — set_workspace","text":"Stacks live singleton workspace.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/set_workspace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workspace — set_workspace","text":"","code":"set_workspace(   ...,   title = \"\",   settings = NULL,   force = FALSE,   workspace = get_workspace() )  restore_workspace(x, force = FALSE, workspace = get_workspace())  save_workspace(file, workspace = get_workspace())  get_workspace()  is_workspace(x)  add_workspace_stack(name, stack, force = FALSE, workspace = get_workspace())  set_workspace_stack(name, stack, force = FALSE, workspace = get_workspace())  rm_workspace_stacks(name, force = FALSE, workspace = get_workspace())  rm_workspace_stack(name, force = FALSE, workspace = get_workspace())  set_workspace_title(title, workspace = get_workspace())  set_workspace_settings(settings, workspace = get_workspace())  list_workspace_stacks(workspace = get_workspace())  clear_workspace(workspace = get_workspace())  get_workspace_stack(name, workspace = get_workspace())  get_workspace_stacks(names = NULL, workspace = get_workspace())  get_workspace_title(workspace = get_workspace())  get_workspace_settings(workspace = get_workspace())  serve_workspace(   ...,   clear = NULL,   id = \"myworkspace\",   workspace = get_workspace() )"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/set_workspace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workspace — set_workspace","text":"... Passed set_workspace() title workspace title settings (optional) list settings (string ist parsed JSON) force Force overwrite existing stacks (otherwise may throw warning) workspace workspace environment x (Workspace) object file Filename name Stack name stack single stack names Stack names clear Clear current worspace id Workspace ID","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/stack_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack header generic — stack_header","title":"Stack header generic — stack_header","text":"Generic creating stack header.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/stack_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack header generic — stack_header","text":"","code":"stack_header(x, ...)  # S3 method for class 'stack' stack_header(x, title, ns, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/stack_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack header generic — stack_header","text":"x Object generate UI components ... Generic consistency title Stack title. ns Module namespace","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/string_field.html","id":null,"dir":"Reference","previous_headings":"","what":"String field constructor — new_string_field","title":"String field constructor — new_string_field","text":"String fields translated textInput","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/string_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String field constructor — new_string_field","text":"","code":"new_string_field(value = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/string_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String field constructor — new_string_field","text":"value Default text input value. ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/submit_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Submit field constructor — new_submit_field","title":"Submit field constructor — new_submit_field","text":"Submit fields translated actionButton","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/submit_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Submit field constructor — new_submit_field","text":"","code":"new_submit_field(...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/submit_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Submit field constructor — new_submit_field","text":"... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/switch_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch field constructor — new_switch_field","title":"Switch field constructor — new_switch_field","text":"Switch fields translated input_switch","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/switch_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch field constructor — new_switch_field","text":"","code":"new_switch_field(value = FALSE, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/switch_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch field constructor — new_switch_field","text":"value Default text input value. ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/uiCode.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy code generic — uiCode","title":"Copy code generic — uiCode","text":"Generate ui copy block code output code content.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/uiCode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy code generic — uiCode","text":"","code":"uiCode(x, ns)  # S3 method for class 'block' uiCode(x, ns)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/uiCode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy code generic — uiCode","text":"x Object generate UI components ns Module namespace","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/uiOutputBlock.html","id":null,"dir":"Reference","previous_headings":"","what":"Render block output generic — uiOutputBlock","title":"Render block output generic — uiOutputBlock","text":"Renders block output.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/uiOutputBlock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render block output generic — uiOutputBlock","text":"","code":"uiOutputBlock(x, ns)  # S3 method for class 'block' uiOutputBlock(x, ns)  # S3 method for class 'upload_block' uiOutputBlock(x, ns)  # S3 method for class 'filesbrowser_block' uiOutputBlock(x, ns)  # S3 method for class 'plot_block' uiOutputBlock(x, ns)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/uiOutputBlock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render block output generic — uiOutputBlock","text":"x Block. ns Output namespace","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/ui_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Block fields generic — ui_fields","title":"Block fields generic — ui_fields","text":"Generic creating fields UI container","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/ui_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block fields generic — ui_fields","text":"","code":"ui_fields(x, ...)  # S3 method for class 'block' ui_fields(x, ns, inputs_hidden, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/ui_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block fields generic — ui_fields","text":"x Object generate UI components ... Generic consistency ns Module namespace inputs_hidden styling purposes: CSS class apply block collapsed.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/ui_input.html","id":null,"dir":"Reference","previous_headings":"","what":"UI input generic — ui_input","title":"UI input generic — ui_input","text":"given field, generates corresponding shiny input tag. ui_update updates corresponding input server side. input_ids reponsible finding element id.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/ui_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI input generic — ui_input","text":"","code":"ui_input(x, id, name)  # S3 method for class 'string_field' ui_input(x, id, name)  # S3 method for class 'select_field' ui_input(x, id, name)  # S3 method for class 'switch_field' ui_input(x, id, name)  # S3 method for class 'numeric_field' ui_input(x, id, name)  # S3 method for class 'submit_field' ui_input(x, id, name)  # S3 method for class 'upload_field' ui_input(x, id, name)  # S3 method for class 'filesbrowser_field' ui_input(x, id, name)  # S3 method for class 'result_field' ui_input(x, id, name)  input_ids(x, ...)  # S3 method for class 'block' input_ids(x, ...)  # S3 method for class 'field' input_ids(x, name, ...)  # S3 method for class 'hidden_field' input_ids(x, name, ...)  # S3 method for class 'variable_field' ui_input(x, id, name)  # S3 method for class 'range_field' ui_input(x, id, name)  # S3 method for class 'hidden_field' ui_input(x, id, name)  # S3 method for class 'list_field' ui_input(x, id, name)  ui_update(x, session, id, name)  # S3 method for class 'string_field' ui_update(x, session, id, name)  # S3 method for class 'select_field' ui_update(x, session, id, name)  # S3 method for class 'switch_field' ui_update(x, session, id, name)  # S3 method for class 'variable_field' ui_update(x, session, id, name)  # S3 method for class 'range_field' ui_update(x, session, id, name)  # S3 method for class 'numeric_field' ui_update(x, session, id, name)  # S3 method for class 'submit_field' ui_update(x, session, id, name)  # S3 method for class 'upload_field' ui_update(x, session, id, name)  # S3 method for class 'filesbrowser_field' ui_update(x, session, id, name)  # S3 method for class 'hidden_field' ui_update(x, session, id, name)  # S3 method for class 'list_field' ui_update(x, session, id, name)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/ui_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI input generic — ui_input","text":"x Object generate UI components id UI IDs name Field name. ... Generic consistency session Shiny session","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/update_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Update field generic — update_field","title":"Update field generic — update_field","text":"Update field new value. Needed update_fields block. Necessary keep R object sync Shiny interface state (input state).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/update_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update field generic — update_field","text":"","code":"update_field(x, new, env = list())  # S3 method for class 'field' update_field(x, new, env = list())  # S3 method for class 'hidden_field' update_field(x, new, env = list())  get_field_name(field, name = \"\")"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/update_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update field generic — update_field","text":"x object inheriting form \"field\" new Value set env Environment data field values field Field element. name pass name title attribute.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/update_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update field generic — update_field","text":"modified field.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/update_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Update fields generic — update_fields","title":"Update fields generic — update_fields","text":"block, update fields.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/update_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update fields generic — update_fields","text":"","code":"update_fields(x, ...)  # S3 method for class 'data_block' update_fields(x, session, ...)  # S3 method for class 'transform_block' update_fields(x, session, data, ...)  # S3 method for class 'plot_block' update_fields(x, session, data, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/update_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update fields generic — update_fields","text":"x object inheriting \"block\" ... generic consistency. session Shiny session data Block input data","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/upload_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload field constructor — new_upload_field","title":"Upload field constructor — new_upload_field","text":"Upload fields translated fileInput","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/upload_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload field constructor — new_upload_field","text":"","code":"new_upload_field(value = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/upload_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload field constructor — new_upload_field","text":"value Default text input value. ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/useBlockr.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Blockr Imports blockr dependencies — useBlockr","title":"Use Blockr Imports blockr dependencies — useBlockr","text":"Use Blockr Imports blockr dependencies","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/useBlockr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Blockr Imports blockr dependencies — useBlockr","text":"","code":"useBlockr()"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/validate_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate field generic — validate_field.string_field","title":"Validate field generic — validate_field.string_field","text":"Checks value field value apply corrections whenever necessary.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/validate_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate field generic — validate_field.string_field","text":"","code":"# S3 method for class 'string_field' validate_field(x)  # S3 method for class 'select_field' validate_field(x)  # S3 method for class 'switch_field' validate_field(x)  # S3 method for class 'numeric_field' validate_field(x)  # S3 method for class 'upload_field' validate_field(x)  # S3 method for class 'filesbrowser_field' validate_field(x)  # S3 method for class 'variable_field' validate_field(x)  # S3 method for class 'range_field' validate_field(x)  # S3 method for class 'list_field' validate_field(x)  # S3 method for class 'keyvalue_field' validate_field(x)  validate_field(x)  # S3 method for class 'field' validate_field(x)  # Default S3 method validate_field(x)  is_valid(x)  # S3 method for class 'field' is_valid(x)  validation_failure(..., class = character())"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/validate_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate field generic — validate_field.string_field","text":"x Field ... Message components (forwarded paste0()) class Condition class (subclass validation_failure)","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/value.html","id":null,"dir":"Reference","previous_headings":"","what":"Get field attribute value — value","title":"Get field attribute value — value","text":"Get field value attribute. function, return result attribute instead.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get field attribute value — value","text":"","code":"value(x, name = \"value\")  # S3 method for class 'field' value(x, name = \"value\")  # S3 method for class 'variable_field' value(x, name = \"value\")  # S3 method for class 'list_field' value(x, name = \"value\")  value(x, name = \"value\") <- value  # S3 method for class 'field' value(x, name = \"value\") <- value  # S3 method for class 'upload_field' value(x, name = \"value\") <- value  # S3 method for class 'filesbrowser_field' value(x, name = \"value\") <- value  # S3 method for class 'list_field' value(x, name = \"value\") <- value"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get field attribute value — value","text":"x object inheriting form \"field\" name Field component name value Field value","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get field attribute value — value","text":"Field value field.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all values from a field — values","title":"Get all values from a field — values","text":"calls value field's names.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all values from a field — values","text":"","code":"values(x, name = names(x))"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all values from a field — values","text":"x object inheriting form \"field\" name Field component name","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all values from a field — values","text":"list containing values.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/variable_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable field constructor — new_variable_field","title":"Variable field constructor — new_variable_field","text":"Variable field intended conditionally display different field based condition.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/variable_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable field constructor — new_variable_field","text":"","code":"new_variable_field(field = character(), components = list(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/variable_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable field constructor — new_variable_field","text":"field Field type components Variable list field components ... parameters passed new_field may needed ui_input pass options related shiny input.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/variable_field.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Variable field constructor — new_variable_field","text":"Currently broken. use.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/write_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Logging — write_log","title":"Logging — write_log","text":"Infrastructure logging messages.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/write_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logging — write_log","text":"","code":"write_log(..., level = \"info\")  log_fatal(...)  log_error(...)  log_warn(...)  log_info(...)  log_debug(...)  log_trace(...)  as_log_level(level)  cnd_logger(msg, level)  cat_logger(msg, level)"},{"path":"https://bristolmyerssquibb.github.io/blockr/reference/write_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logging — write_log","text":"... Concatenated paste0(..., \"\\n\") level Logging level (possible values \"fatal\", \"error\", \"warn\", \"info\", \"debug\" \"trace\" msg Message (string)","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr/news/index.html","id":"feature-0-0-2-9000","dir":"Changelog","previous_headings":"","what":"Feature","title":"blockr 0.0.2.9000","text":"Improved add new block. Added new category registry. Now block registered, may pass category parameter (used add block feature sort blocks): passed, block belong uncategorized blocks (default).","code":"register_block(   constructor = new_tail_block,   name = \"tail block\",   description = \"return last n rows\",   category = \"transform\",   classes = c(\"tail_block\", \"transform_block\"),   input = \"data.frame\",   output = \"data.frame\" )"},{"path":"https://bristolmyerssquibb.github.io/blockr/news/index.html","id":"doc-0-0-2-9000","dir":"Changelog","previous_headings":"","what":"Doc","title":"blockr 0.0.2.9000","text":"Improved registry getting started vignettes. Add new case studies vignette present blockr various contexts. Refine GitHub readme.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr/news/index.html","id":"fixes-0-0-2-9000","dir":"Changelog","previous_headings":"","what":"Fixes","title":"blockr 0.0.2.9000","text":"Fix issue handle_remove.block: vals$stack wasn’t correctly updated last block removed leading wrong state. Loading spinner now correctly hidden block visual updated.","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr/news/index.html","id":"breaking-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"blockr 0.0.2","text":"Change blocks fields constructor names new_*_block new_*_field. instance, select block, users now supposed use new_select_block() select_block. Remove data block constructor:","code":"new_select_block <- function(columns = character(), ...) {   ... }"},{"path":"https://bristolmyerssquibb.github.io/blockr/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"New features","title":"blockr 0.0.2","text":"New validation functions: validate_field() validate_block() check values consistent data. used propagate error user via JavaScript. Evaluation stops whenever block isn’t valid app crash. can now instantiate block outside stack default parameter values (use old way constructors):","code":"# New way data_blk <- new_dataset_block(selected = \"lab\", package = \"blockr.data\") select_blk <- new_select_block(\"STUDYID\")  stack <- new_stack(data_blk, select_blk)  # Old way stack <- new_stack(new_data_block, new_select_block)"},{"path":"https://bristolmyerssquibb.github.io/blockr/news/index.html","id":"blockr-0019000","dir":"Changelog","previous_headings":"","what":"blockr 0.0.1.9000","title":"blockr 0.0.1.9000","text":"single stacks. data block. filter block. Add/remove block stack.","code":""}]
